/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui2;

import bn.BNode;
import bn.EnumVariable;
import bn.Predef;
import bn.Variable;
import com.mxgraph.model.mxIGraphModel;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.util.mxConstants;
import com.mxgraph.view.mxGraph;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Random;
import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.ParallelGroup;
import javax.swing.GroupLayout.SequentialGroup;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.border.Border;

/**
 *
 * @author Jun Ling
 */
public class MainJFrame extends javax.swing.JFrame {

    BNContainer bnc;
    gui2.MyGraphPanel graphPanel;
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
//        propertiesPanel.setVisible(false);
//        actionsPanel.setVisible(false);
        bnc = new BNContainer();
        graphPanel = new gui2.MyGraphPanel();
        graphPanel.setBNContainer(bnc);
        initNodeButtons();
        initDrawPanel();
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupNodes = new javax.swing.ButtonGroup();
        addNodePanel = new javax.swing.JPanel();
        drawPanel = new javax.swing.JPanel();
        panelContainerPanel = new javax.swing.JPanel();
        actionsPanel = new javax.swing.JPanel();
        deleteSelectedBtn = new javax.swing.JButton();
        deleteAllBtn = new javax.swing.JButton();
        applyLayoutBtn = new javax.swing.JButton();
        testButton = new javax.swing.JButton();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addNodePanel.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout addNodePanelLayout = new javax.swing.GroupLayout(addNodePanel);
        addNodePanel.setLayout(addNodePanelLayout);
        addNodePanelLayout.setHorizontalGroup(
            addNodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 163, Short.MAX_VALUE)
        );
        addNodePanelLayout.setVerticalGroup(
            addNodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 537, Short.MAX_VALUE)
        );

        drawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        actionsPanel.setBackground(new java.awt.Color(204, 204, 204));
        actionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Node Actions"));

        deleteSelectedBtn.setText("Delete selected");
        deleteSelectedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedBtnActionPerformed(evt);
            }
        });
        actionsPanel.add(deleteSelectedBtn);

        deleteAllBtn.setText("Delete all");
        deleteAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllBtnActionPerformed(evt);
            }
        });
        actionsPanel.add(deleteAllBtn);

        applyLayoutBtn.setText("Apply layout");
        applyLayoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyLayoutBtnActionPerformed(evt);
            }
        });
        actionsPanel.add(applyLayoutBtn);

        testButton.setText("testing");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(testButton);

        javax.swing.GroupLayout panelContainerPanelLayout = new javax.swing.GroupLayout(panelContainerPanel);
        panelContainerPanel.setLayout(panelContainerPanelLayout);
        panelContainerPanelLayout.setHorizontalGroup(
            panelContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerPanelLayout.createSequentialGroup()
                .addComponent(actionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelContainerPanelLayout.setVerticalGroup(
            panelContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerPanelLayout.createSequentialGroup()
                .addGap(247, 247, 247)
                .addComponent(actionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))
        );

        jMenuFile.setText("File");

        jMenuItemOpen.setText("Open file...");
        jMenuFile.add(jMenuItemOpen);

        jMenuItemSave.setText("Save");
        jMenuFile.add(jMenuItemSave);

        jMenuBarMain.add(jMenuFile);

        jMenuEdit.setText("Edit");
        jMenuBarMain.add(jMenuEdit);

        setJMenuBar(jMenuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addNodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addNodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initDrawPanel()
    {
        // adds the graph panel to drawPanel.
        GroupLayout layout = new GroupLayout(drawPanel);
        drawPanel.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphPanel)
        );
    }
    
    private void initNodeButtons(){
        
        // Name and label border
        Border addNodeBorder = BorderFactory.createTitledBorder("Add Node");
        addNodePanel.setBorder(addNodeBorder);
        
        // Set up group layout for the 'add nodes' panel
        GroupLayout layout = new GroupLayout(addNodePanel);
        addNodePanel.setLayout(layout);
        layout.setAutoCreateContainerGaps(true);
        layout.setAutoCreateGaps(true);
        
        // Set up a dummy JRadioButton for dynamically adding 
        // buttons in for loop.
        ArrayList<JButton> BtnArr = new ArrayList<>();
        JButton dummybtn;
        
        // Construct radio buttons for each predefined type
        // and add to button group.
        for(String s: Predef.getVariableTypes()){
            dummybtn = new JButton(s);
            // TODO: Custom appearance for buttons
            
            BtnArr.add(dummybtn);
            
            // Listener should add node, select it, and refresh parameterPanel
            dummybtn.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
//                    propertiesPanel.setVisible(true);
                    actionsPanel.setVisible(true);
                    JButton thisbtn = (JButton) e.getSource();
                    String type = thisbtn.getText();
                    String paramDesc = "";
//                    nodeParametersField.setText("");
//                    nodeNameField.setText("");
                    if (Predef.parameterName(type) != null){
//                        nodeParametersField.setEnabled(true);
                        paramDesc = "<br>" + Predef.parameterName(type);
                    } else {
//                        nodeParametersField.setEnabled(false);
                        paramDesc = "<br>No additional parameters.";
                    }
                    
//                    nodeDescriptionLabel.setText("<html>" + "Node type " +
//                           type +
//                           paramDesc);
                    
                    createNode(type + " node", type, "1");
                }
            });
        }
        
        // Add elements to groupings and add to layout.
        ParallelGroup hRadioButtons = layout.createParallelGroup();
        for (JButton b: BtnArr){
            hRadioButtons.addComponent(b);
        }
        
        layout.setHorizontalGroup(
                layout.createSequentialGroup()
                .addGroup(hRadioButtons)
        );
        
        SequentialGroup vRadioButtons = layout.createSequentialGroup();
        for (JButton b: BtnArr){
            vRadioButtons.addComponent(b);
        }
        
        layout.setVerticalGroup(
                vRadioButtons
                .addGroup(layout.createParallelGroup())
        );
        
        addNodePanel.setVisible(true);
    }
        
    private void renderNetwork(BNContainer bnc) {
        final mxGraph graph = graphPanel.getGraph();
        graph.removeCells(graphPanel.getAllCells());
        for (BNode node : bnc.getBNet().getNodes()) {
            Variable var = node.getVariable();
            if (var != null) {
                String type = var.getPredef();
                String name = var.getName();
                String params = var.getParams();
                String color = (Predef.isEnumerable(type)?"yellow":"orange"); // yellow for enumerable nodes, orange for continuous
                String label = name;
                graph.getModel().beginUpdate();
                
                Random rand = new Random();
                try {
                    
                    Object newvertex = graph.insertVertex(graph.getDefaultParent(), null, label, 
                            rand.nextInt(50), rand.nextInt(50), rand.nextInt(80), rand.nextInt(30), 
                            "ROUNDED;strokeColor=black;fillColor="+color);
                    graphPanel.addVertex(name, newvertex);
                } finally {
                    graph.getModel().endUpdate();
                }
            }
        } // variables done... now connect them
        for (BNode node : bnc.getBNet().getNodes()) {
            String child_name = node.getVariable().getName();
            Object child_vertex = graphPanel.getVertex(child_name);
            if (node.getParents() != null) {
                for (EnumVariable parent : node.getParents()) {
                    String parent_name = parent.getName();
                    Object parent_vertex = graphPanel.getVertex(parent_name);
                    graph.getModel().beginUpdate();
                    try {
                        Object newedge = graph.insertEdge(graph.getDefaultParent(), null, "", parent_vertex, child_vertex);
                        
                    } finally {
                        graph.getModel().endUpdate();
                    }
                }
            }
        }        
//        graphPanel.executeLayout(getCurrentLayout());
        graphPanel.executeLayout(1);
    }
    
    
    private void createNode(String name, String type, String params) {
        final mxGraph graph = graphPanel.getGraph();
        Object parent = graph.getDefaultParent();
        params = "";
        try {
                String color = (Predef.isEnumerable(type)?"yellow":"orange"); // yellow for enumerable nodes, orange for continuous
//                String cellStyle = (Predef.parameterName(type).equals("String") ? "STRING_STYLE" : "BOOL_STYLE");
                String label = name;
                graph.getModel().beginUpdate();
                try {
                    graphPanel.defStyleSheets(graph); // custom vertex and edge styles
                    Object newvertex = graph.insertVertex(parent, null, label, 50, 50, 100, 50, "ROUNDED;strokeColor=black;fillColor="+color);
//                    Object newvertex = graph.insertVertex(parent, null, label, 50, 50, 100, 50, cellStyle);
                    graphPanel.addVertex(name, newvertex);
//                    Object newedge = graph.insertEdge(parent, null, parent, parent, parent, params)
                    graphPanel.setSelected(newvertex);
//                    bnc.addNode(Predef.getBNode(var, new ArrayList<Variable>(), Predef.getBNodeType(type)));
                } finally {
                    graph.getModel().endUpdate();
                }
//            }
        } catch (RuntimeException e) {
//            error_msg = e.getLocalizedMessage();
        }
    }
    public static boolean isDeleteMode() {
        return deleteMode;
    }
    
    /**
     * Gets the selected RadioButton from a ButtonGroup.
     * Can use button.getText() to find text of selected button etc.
     * @param group
     * @return AbstractButton
     */
    public AbstractButton getSelectedRadioButton(ButtonGroup group){
         for (Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                return button;
            }
        }
        return null;
    }
    
    
    private void drawPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseClicked

        
    }//GEN-LAST:event_drawPanelMouseClicked

    private void deleteSelectedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedBtnActionPerformed
        graphPanel.deleteSelected();
        //TODO remove stuff in model as well
        
    }//GEN-LAST:event_deleteSelectedBtnActionPerformed

    private void deleteAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllBtnActionPerformed
        mxGraph graph = graphPanel.getGraph();
        graph.removeCells(graph.getChildVertices(graph.getDefaultParent()));
        
        //TODO remove stuff in model as well
    }//GEN-LAST:event_deleteAllBtnActionPerformed

    private void applyLayoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyLayoutBtnActionPerformed
        graphPanel.setLayout("");
        
    }//GEN-LAST:event_applyLayoutBtnActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        // TODO add your handling code here:
        System.out.println(getContentPane());
        java.awt.Container panel = getContentPane();
        
        nodePropertiesPane  npp;
        npp = new nodePropertiesPane();
        panel.add(npp);
        npp.setVisible(true);
        panel.setForeground(Color.red);
//        panel.remove(propertiesPanel);
//        remove(propertiesPanel);
        panel.revalidate();
        panel.repaint();
    }//GEN-LAST:event_testButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JPanel addNodePanel;
    private javax.swing.JButton applyLayoutBtn;
    private javax.swing.ButtonGroup buttonGroupNodes;
    private javax.swing.JButton deleteAllBtn;
    private javax.swing.JButton deleteSelectedBtn;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JPanel panelContainerPanel;
    private javax.swing.JButton testButton;
    // End of variables declaration//GEN-END:variables

public static boolean deleteMode = false;

}
