/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui2;

import bn.BNode;
import bn.EnumVariable;
import bn.Predef;
import bn.Variable;
import com.mxgraph.view.mxGraph;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.border.Border;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jun Ling
 */
public class MainJFrame extends javax.swing.JFrame {

    BNContainer bnc;
    gui2.MyGraphPanel graphPanel;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
//        propertiesPanel.setVisible(false);
//        actionsPanel.setVisible(false);
        bnc = new BNContainer();
        graphPanel = new gui2.MyGraphPanel();
        graphPanel.setAutoscrolls(true);
        graphPanel.setBNContainer(bnc);

        initNodeButtons();
//        initNodeLbls();
        
        initDrawPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupNodes = new javax.swing.ButtonGroup();
        addNodePanel = new javax.swing.JPanel();
        drawPanel = new javax.swing.JPanel();
        panelContainerPanel = new javax.swing.JPanel();
        actionsPanel = new javax.swing.JPanel();
        deleteSelectedBtn = new javax.swing.JButton();
        deleteAllBtn = new javax.swing.JButton();
        applyLayoutBtn = new javax.swing.JButton();
        testButton = new javax.swing.JButton();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addNodePanel.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout addNodePanelLayout = new javax.swing.GroupLayout(addNodePanel);
        addNodePanel.setLayout(addNodePanelLayout);
        addNodePanelLayout.setHorizontalGroup(
            addNodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 139, Short.MAX_VALUE)
        );
        addNodePanelLayout.setVerticalGroup(
            addNodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 537, Short.MAX_VALUE)
        );

        drawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        actionsPanel.setBackground(new java.awt.Color(204, 204, 204));
        actionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Node Actions"));

        deleteSelectedBtn.setText("Delete selected");
        deleteSelectedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedBtnActionPerformed(evt);
            }
        });
        actionsPanel.add(deleteSelectedBtn);

        deleteAllBtn.setText("Delete all");
        deleteAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllBtnActionPerformed(evt);
            }
        });
        actionsPanel.add(deleteAllBtn);

        applyLayoutBtn.setText("Apply layout");
        applyLayoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyLayoutBtnActionPerformed(evt);
            }
        });
        actionsPanel.add(applyLayoutBtn);

        testButton.setText("testing");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(testButton);

        javax.swing.GroupLayout panelContainerPanelLayout = new javax.swing.GroupLayout(panelContainerPanel);
        panelContainerPanel.setLayout(panelContainerPanelLayout);
        panelContainerPanelLayout.setHorizontalGroup(
            panelContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContainerPanelLayout.createSequentialGroup()
                .addComponent(actionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelContainerPanelLayout.setVerticalGroup(
            panelContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerPanelLayout.createSequentialGroup()
                .addComponent(actionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenuFile.setText("File");

        jMenuItemOpen.setText("Open file...");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);

        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuBarMain.add(jMenuFile);

        jMenuEdit.setText("Edit");
        jMenuBarMain.add(jMenuEdit);

        setJMenuBar(jMenuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addNodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addNodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // TODO: factor this out properly later
    public JPanel getPanelContainer() {
        return panelContainerPanel;
    }

    private void initDrawPanel() {
        // adds the graph panel to drawPanel.
        GroupLayout layout = new GroupLayout(drawPanel);
        drawPanel.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(graphPanel)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(graphPanel)
        );
    }

    private void initNodeButtons() {

        // Name and label border
        Border addNodeBorder = BorderFactory.createTitledBorder("Add Node");
        addNodePanel.setBorder(addNodeBorder);

        // Set up layout for the 'add nodes' panel
        addNodePanel.setLayout(new BoxLayout(addNodePanel, BoxLayout.Y_AXIS));

        // Set up a dummy JRadioButton for dynamically adding 
        // buttons in for loop.
        ArrayList<JButton> BtnArr = new ArrayList<>();
        JButton dummybtn;

        // Construct radio buttons for each predefined type
        // and add to button group.
        for (String s : Predef.getVariableTypes()) {
            dummybtn = new JButton(s);
            // TODO: Custom appearance for buttons

            BtnArr.add(dummybtn);

            // Listener should add node, select it, and refresh parameterPanel
            dummybtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
//                    propertiesPanel.setVisible(true);
                    actionsPanel.setVisible(true);
                    JButton thisbtn = (JButton) e.getSource();
                    String type = thisbtn.getText();
                    String paramDesc = "";

                    // don't update this here...
//                    if (Predef.parameterName(type) != null) {
//                        paramDesc = "<br>" + Predef.parameterName(type);
//                    } else {
////                        nodeParametersField.setEnabled(false);
//                        paramDesc = "<br>No additional parameters.";
//                    }
                    // Need to fix these dummy inputs so things don't break
                    createNode(null, type, null);
                }
            });
        }

        // Add buttons.
        for (JButton b : BtnArr) {
            addNodePanel.add(b);
        }

        addNodePanel.setVisible(true);
    }

    private void initNodeLbls() {
        ;
        // Name and label border
        Border addNodeBorder = BorderFactory.createTitledBorder("Add Node");
        addNodePanel.setBorder(addNodeBorder);

        // Set up layout for the 'add nodes' panel
        addNodePanel.setLayout(new BoxLayout(addNodePanel, BoxLayout.Y_AXIS));

        // Set up a dummy JLabel for dynamically adding 
        // buttons in for loop.
        ArrayList<NodeLabel> LblArr = new ArrayList<>();
        NodeLabel dummylbl;

        // Construct radio buttons for each predefined type
        // and add to button group.
        for (String s : Predef.getVariableTypes()) {
            dummylbl = new NodeLabel(graphPanel, s);

            // change appearnace
            Border border = BorderFactory.createLineBorder(Color.BLUE, 2);
            dummylbl.setBorder(border);

            LblArr.add(dummylbl);

        }

        // Add buttons.
        for (NodeLabel b : LblArr) {
            addNodePanel.add(b);
        }

        addNodePanel.setVisible(true);
    }

    public class DragMouseAdapter extends MouseAdapter {

        public void mousePressed(MouseEvent e) {
            System.out.println("Label pressed");
            JComponent c = (JComponent) e.getSource();
            TransferHandler handler = c.getTransferHandler();
            System.out.println("handler is: " + handler);
            handler.exportAsDrag(c, e, TransferHandler.COPY);
        }
    }

    private void renderNetwork(BNContainer bnc) {
        final mxGraph graph = graphPanel.getGraph();
        graph.removeCells(graphPanel.getAllCells());

        for (BNode node : bnc.getBNet().getNodes()) {
            Variable var = node.getVariable();
            if (var != null) {
                String type = var.getPredef();
                String name = var.getName();
                String params = var.getParams();
                graph.getModel().beginUpdate();

                try {
                    String color = (Predef.isEnumerable(type) ? "yellow" : "orange");
                    Object newvertex = graph.insertVertex(graph.getDefaultParent(), 
                            null, name, 50, 50, 80, 30, "ROUNDED;strokeColor=black;fillColor=" + color);
                    graphPanel.addVertex(name, newvertex);
                } finally {
                    graph.getModel().endUpdate();
                }
            }
        } // variables done... now connect them
        for (BNode node : bnc.getBNet().getNodes()) {
            String child_name = node.getVariable().getName();
            System.out.println("About to draw edges in renderNetwork");
            Object child_vertex = graphPanel.getVertex(child_name);
            if (node.getParents() != null) {
                for (EnumVariable parent : node.getParents()) {
                    String parent_name = parent.getName();
                    Object parent_vertex = graphPanel.getVertex(parent_name);
                    graph.getModel().beginUpdate();
                    System.out.println("Inserting edge between" + parent_name + " and " + child_name);
                    try {

                        Object newedge = graph.insertEdge(graph.getDefaultParent(), null, "", parent_vertex, child_vertex);

                    } finally {
                        graph.getModel().endUpdate();
                    }
                }
            } else {
                System.out.println("No parents :(");
            }
        }
//        graphPanel.executeLayout(getCurrentLayout());
        graphPanel.executeLayout(1);
    }

    private void createNode(String name, String type, String params) {
        final mxGraph graph = graphPanel.getGraph();

        // Set defaults for initialising node...
        if (name == null) {
            name = type + " node";
        }
        // only String and Number are parametrised atm
        if (params == null) {
            params = type.equalsIgnoreCase("String") ? "a;b"
                    : type.equalsIgnoreCase("Number") ? "5" : // this bugs out when real int provided
                    null;
        }
        try {
            String color = (Predef.isEnumerable(type) ? "yellow" : "orange"); // yellow for enumerable nodes, orange for continuous
//                String cellStyle = (Predef.parameterName(type).equals("String") ? "STRING_STYLE" : "BOOL_STYLE");
            String label = name;
            graph.getModel().beginUpdate();
            Variable var = Predef.getVariable(name, type, params);

            try {
                graphPanel.defStyleSheets(graph); // custom vertex and edge styles
                Object newvertex = graph.insertVertex(graph.getDefaultParent(), null, label, 50, 50, 100, 50, "ROUNDED;strokeColor=black;fillColor=" + color);
                graphPanel.addVertex(name, newvertex);
                graphPanel.addCellSelection(newvertex);
                System.out.println("bnode is: " + Predef.getBNode(var, new ArrayList<Variable>(), Predef.getBNodeType(type)));
                BNode newBNode = Predef.getBNode(var, new ArrayList<Variable>(), Predef.getBNodeType(type));
                bnc.addNode(newBNode);
                Variable nodevar = bnc.getVariable(graph.getLabel(newBNode));
                nodevar.setName(name);
                nodevar.setParams(params);
                nodevar.setPredef(type);
            } finally {
                graph.getModel().endUpdate();
            }
//            }
        } catch (RuntimeException e) {
//            error_msg = e.getLocalizedMessage();
        }
    }


    private void drawPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseClicked


    }//GEN-LAST:event_drawPanelMouseClicked

    private void deleteSelectedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedBtnActionPerformed
        graphPanel.deleteSelected();


    }//GEN-LAST:event_deleteSelectedBtnActionPerformed

    private void deleteAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllBtnActionPerformed
        mxGraph graph = graphPanel.getGraph();
        for (Object cell : graph.getChildVertices(graph.getDefaultParent())) {
            graphPanel.addCellSelection(cell);
        }
        graphPanel.deleteSelected();
        graph.removeCells(graph.getChildVertices(graph.getDefaultParent()));

    }//GEN-LAST:event_deleteAllBtnActionPerformed

    private void applyLayoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyLayoutBtnActionPerformed
        graphPanel.setLayout("");

    }//GEN-LAST:event_applyLayoutBtnActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        // TODO add your handling code here:

        JButton thisbtn = (JButton) evt.getSource();
        System.out.println(SwingUtilities.getUnwrappedParent(thisbtn));

        java.awt.Container panel = SwingUtilities.getUnwrappedParent(thisbtn);
        JPanel frame = (JPanel) SwingUtilities.getUnwrappedParent(panel);
        System.out.println(frame.getLayout());
        nodePropertiesPane npp = new nodePropertiesPane();
        frame.add(npp);
        frame.setLayout(new GridLayout(2, 0));

        frame.validate();

    }//GEN-LAST:event_testButtonActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        graphPanel.saveNetwork();

    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        JFileChooser c = new JFileChooser();

        // For now only allow .xml files
      FileFilter filter = new FileNameExtensionFilter("XML file", "xml");
      c.setFileFilter(filter);
        int rVal = c.showOpenDialog(c);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            File file = c.getSelectedFile();
            if (file != null) {
                try {
                    bnc.load(file.getCanonicalPath());
                    renderNetwork(bnc);
                    graphPanel.setLayout("");
                } catch (IOException ex) {

                }
            }
            // open
        }
        if (rVal == JFileChooser.CANCEL_OPTION) {
            // do nothing for now
        }
        // Later replace this with
        // graphPanel.loadNetwork();
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JPanel addNodePanel;
    private javax.swing.JButton applyLayoutBtn;
    private javax.swing.ButtonGroup buttonGroupNodes;
    private javax.swing.JButton deleteAllBtn;
    private javax.swing.JButton deleteSelectedBtn;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JPanel panelContainerPanel;
    private javax.swing.JButton testButton;
    // End of variables declaration//GEN-END:variables

}
