= Implementation for BN prior =

Prior is used as a alternative way for BN to estimate distribution given data. Prior is background knowledge in the absence of data, which is useful when data is limited.

The start point to understand prior is the log likelihood of the training data. Our estimated parameters are observed when the log likelihood is maximized. However, if we consider Bayesian framework, prior could be introduced. In Bayesian framework, we get our parameters from distribution rather likelihood. The distribution we use is "posterior", which is shown below. 
{{{
           Posterior = likelihood * Prior
}}}


For the purpose of simplicity, we would like the conjugate distribution which has the same formula for prior and posterior.

The implementation for prior is shown below:

===[https://code.google.com/p/bnkit/source/browse/trunk/bnkit/src/bn/BNode.java Bnode]===

In Bnod, we should implement,
{{{
   // get the condition data given the condition (parent value) index in the enum table 
   public List<Sample> getConditionDataset(int conditionIndex);

   // get a new, empty distribution used in this Bnode (e.g. CPT return a new empty enum distribution)
   public Distrib getlikelihoodDistrib(); 
}}}

===[https://code.google.com/p/bnkit/source/browse/trunk/bnkit/src/bn/prior/Prior.java Prior]===

In prior, we should implement all method. Prior example [https://code.google.com/p/bnkit/source/browse/trunk/bnkit/src/bn/prior/DirichletDistribPrior.java DirichletDistribPrior] 
[https://code.google.com/p/bnkit/source/browse/trunk/bnkit/src/bn/prior/GammaDistribPrior.java GammaDistribPrior]
[https://code.google.com/p/bnkit/source/browse/trunk/bnkit/src/bn/prior/GaussianDistribPrior.java GuassianDistribPrior]
can be found in bn.prior.

{{{
    /**
      * distribution can learn from the data and change its own parameters this is a process from prior to posterior.
     * each Object is a training point, and their weight (or count) stored in prob array.
     */
     public void learn(Object[] data, double[] prob);
	
     /**
      * set likelihood distribution (get from the method getlikelihoodDistrib in BNode)
      */
     public void setLikelihoodDistrib(Distrib distrib);
	
     /**
       * get the MAP result distribution
      */
     public Distrib getBayesDistrib();
	
     /**
       * reset the parameters to the initial value used in EM
      */
     public void resetParameters();
     /**
       * This is the interface to learn prior parameters
       * from raw dataset
       */
     public void learnPrior(Object[] data, double[] prob);
}}}

===[https://code.google.com/p/bnkit/source/browse/trunk/bnkit/src/bn/prior/PriorBNode.java PriorBode]===

PriorBNode is a decoration for Bnode. Demo can be found in [https://code.google.com/p/bnkit/source/browse/trunk/bnkit/src/bn/prior/PriorExample.java PriorExample] in bn.prior.

Simple Example:
{{{
    EnumVariable sun = Predef.Boolean("Sunrise");

    CPT cpt = new CPT(sun); // normal Bnode

    PriorBNode priorNode = new PriorBNode(cpt);  // pass the Bnode into PriorBnode

    DirichletDistribPrior betaDistrib = ...// get prior distribution

    priorNode.setPrior(betaDistrib); // set Bnode for a root node

    EnumVariable rain = Predef.Boolean("rain");
    
    CPT cpt2 = new CPT(rain, sun);
    PriorBNode priorNode2 = new PriorBNode(cpt2);
    // prior for sun rise. 90% it won't rain
    DirichletDistribPrior sunRiseBetaDistrib = new DirichletDistribPrior(rain.getDomain(), new double[] {0.1,0.9}, 1);
    // prior for sun not rise. 60% it will rain
    DirichletDistribPrior sunNotRiseBetaDistrib = new DirichletDistribPrior(rain.getDomain(), new double[] {0.6,0.4}, 1);
    DirichletDistribPrior uni = new DirichletDistribPrior(rain.getDomain(), new double[] {1, 1}, 1);
    //set the uniform distribution, used when there is no prior privoded for some condition
    priorNode2.setUniformPrior(uni);
    /**
      * Node that when set prior, the order of parent value should 
      * be the same as the one used in constructor of CPTPrior
    */
    priorNode2.setPrior(new Object[] {true}, sunRiseBetaDistrib);
 }}}