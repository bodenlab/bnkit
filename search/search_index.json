{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bnkit documentation","text":"<p>Text like this</p> <p><code>Code like this</code></p> <p>Change this.</p>"},{"location":"#heading-here","title":"Heading here","text":"<p>This adds a link to the right hand side</p>"},{"location":"#another-heading","title":"Another heading","text":"<p>And another heading is added.</p>"},{"location":"annotacer/","title":"Annotate Ancestral Reconstruction (AnnotAceR)","text":"<p>AnnotAceR is a tool to annotate ancestors and extant nodes in a phylogenetic tree by  reference to a subset of nodes with known properties. These properties are represented by either  discrete or continuous variables. In the latter case, it also uses latent discrete variables  to mix (Gaussian) distributions of the observable continuous variables. (The parameters for these mixtures are shared between all nodes in the tree; the states at the nodes are governed by an evolutionary model.) The use of latent variables is optional for discrete observables. AnnotAceR forms part of the GRASP-suite (Foley et al., 2022).</p>"},{"location":"annotacer/#using-annotacer","title":"Using AnnotAceR","text":"<p><code>Usage: asr.AnnotAceR</code></p> <pre><code>[-nwk &lt;tree-file&gt; -in {&lt;label&gt;{:&lt;parser&gt;}@}&lt;input-file&gt; -out &lt;output-file&gt;]\n\n{-model &lt;uniform(default)&gt;}\n\n{-gamma &lt;gamma-value(default 1.0)&gt;}\n\n{-params &lt;JSON-file&gt;}\n\n{-latent &lt;#states&gt;}\n\n{-internal}\n\n{-learn}\n\n{-tied}\n\n{-seed &lt;seed&gt;}\n\n{-joint (default) | -marg {&lt;branchpoint-id&gt;}}\n\n{-format &lt;TSV(default), TREE, STDOUT, ITOL&gt;}\n\n{-help|-h}\n\n{-verbose|-v}\n\nwhere\ntree-file is a phylogenetic tree on Newick format.\ninput-file is a table with sequence or ancestor names in the first column, and corresponding values\n(empty or None or null implies not assigned) on TSV format.\nlabel flags that a header is used in the input-file and identifies the column with values to be modelled;\nif no label is given, headers are assumed absent and values from the second column will be modelled\nparser identifies a parser to use on the column with values (e.g. BRENDA).\noutput-file will contain:\ninferred branch point states on specified format (TSV by default, TREE is a labelled tree on Newick format, \nITOL is a dataset to decorate trees in iTOL.embl.de).\ngamma-value is parameter to the uniform model (n-state generalisation of Jukes-Cantor).\nJSON-file contains a JSON string specifying the distribution for latent nodes (if latent mode is used).\nlatent indicates that the tree consists of latent values only (latent mode), with specified values \nas extensions to the leaves.\n#states is the number of latent states to learn (should not exceed 25, labelled A-Z).\ninternal indicates that internal nodes are also extended with user-specified or learned distributions \n(default leaves-only).\nlearn excludes inference and instead prompts EM learning of parameters, using input data as training data.\ntied implies that the variance learned is the same across the latent states (only applicable when \nEM-learning GDTs; default is off).\nhelp prints out commandline arguments (this screen).\nverbose completes the requested steps while printing out messages about the process.\n</code></pre>"},{"location":"annotacer/#notes","title":"Notes:","text":"<p>Evolutionary models of substitution are currently limited to uniform, which is an adaptation of Jukes-Cantor for arbitrary number of states (gamma-value is used by this model).</p> <p>If specified values are real, a conditional Gaussian mixture distribution conditioned on latent state is learned.</p> <p>If specified values are discrete, a multinomial distribution conditioned on latent state is learned.</p> <p>Inference is either joint (default) or marginal (marginal allows a branch-point to be nominated; if one is not given all uninstantiated nodes are inferred).</p>"},{"location":"annotacer/#examples","title":"Examples","text":""},{"location":"annotacer/#example-1","title":"Example 1","text":"<p>Here we use a tree <code>ancestors.nwk</code> with extant nodes labelled by their accession IDs and internal, ancestor nodes labelled  as per GRASP (N0, N1, etc in a depth first manner). Then we have a tab-separated value file (TSV file) with annotations  <code>annotations.txt</code> extracted from various sources; each column has a header (e.g. <code>SUPERKINGDOM</code>) that we reference below.</p> <p>We infer the joint labeling (<code>-joint</code>) of external and internal (<code>-internal</code>) nodes most likely to explain the labels in the matching annotation file.</p> <p><code>AnnotAceR -nwk ancestors.nwk -in SUPERKINGDOM@annotations.txt -joint -internal -out tst_Taxonomic_lineage_SUPERKINGDOM.txt -format ITOL</code></p> <p>Here are 10 lines from <code>annotations.txt</code>:</p> <pre><code>Entry   PHYLUM  SUPERKINGDOM    BRENDA_TS_DATA\nA5ILB0  Thermotogae Bacteria    None\nP08144  Arthropoda  Eukaryota   57.7_count=1\nP29957  Proteobacteria  Bacteria    44.1_count=1\nH2N0D4  Chordata    Eukaryota   55_count=1\nT1WDH2  Ciliophora  Eukaryota   40_count=1;50_count=2\nT1WE96  Ciliophora  Eukaryota   40_count=1;50_count=2\nH9B4I9  Firmicutes  Bacteria    62.3_count=2\nA0A060DAC6  None    None    34_count=1;55_count=3\nQ47R94  Actinobacteria  Bacteria    74_count=1\n</code></pre> <p>The result is here saved as an iTOL dataset file (<code>-format ITOL</code>), which we drop in the iTOL webtool once the tree file has been uploaded.</p> <p></p>"},{"location":"annotacer/#example-2","title":"Example 2","text":"<p>This example learns distributions for continuous, experimental values, as observed for various ancestral  reconstructions across a tree (yes, you can mix extants and ancestors). It then infers continuous values for uninstantiated nodes in the tree, including other ancestors and all extants, conditioned on those  that are known.</p> <p>First, learning the distribution shared by all nodes (external and internal, as turned \"on\" by the option  <code>-internal</code>). The model uses three latent states (<code>-latent 3</code>) for which it invents three discrete values:  <code>NADPH_kcat_1</code>, <code>NADPH_kcat_2</code>, ... These are not shown by default in marginal inference, as the method  instead opts to sample the continuous distribution many times to arrive at a mean value. </p> <p><code>asr.AnnotAceR -nwk kari_ancestors.nwk -in NADPH_kcat@experiments.txt -latent 3 -learn -internal -params params_NADPH_kcat.json -out trn_NADPH_kcat.txt -format ITOL -seed 1 -tied</code></p> <p>Experimental values are available for a group of ancestors in <code>experiments.txt</code> (TSV file; note that  ancestor names are numbers as generated by GRASP, not including the 'N' prefix). Note also that when no  value is available you just leave that cell blank or use a value like <code>null</code>, <code>None</code>:</p> <pre><code>Ancestor    NADPH_kcat  NADH_kcat   NADPH_km    NADH_km NADPH_kcat_km   NADH_kcat_km    NADPH_Vmax  NADH_Vmax   NADH_Tm\n615 0.102   0.04    0.106   0.251   0.965   0.158   1.02E-04    3.95E-05    75.0\n459 0.244   0.213   0.06    0.131   4.081   1.627   1.22E-04    1.06E-04\n608 0.854   0.582   0.563   0.854   1.518   0.681   8.54E-04    5.82E-04    100.0\n95  0.474   0.456   0.177   0.217   2.686   2.119   4.74E-04    4.56E-04    90.0\n29  0.028   0.04    0.112   0.074   0.245   0.538   2.75E-04    3.99E-05\n227 0.138   0.083   0.2277  0.1702  0.607   0.546   1.38E-04    9.29E-05    95.0\n79                                  85.0%\n</code></pre> <p>Training was done with tied variances as this dataset is extremely sparse (only five values known).  The latent-to-continuous value distribution shared between nodes is saved after training as:</p> <pre><code>{\"Condition\":[[\"NADPH_kcat_1\"],[\"NADPH_kcat_2\"],[\"NADPH_kcat_3\"]],\n\"Pr\":[[0.8539999487484222,0.007448424553531107],\n[0.29523664088109924,0.007448424553531107],\n[0.07218627893409603,0.007448424553531107]],\n\"Variable\":{\"Domain\":{\"Predef\":\"Real\"},\"Name\":\"0_Real\"},\"Nodetype\":\"GDT\",\"TieVariance\":2,\"Index\":[0,1,2]}\n</code></pre> <p>The training data was saved as an iTOL dataset above and can be dropped into the iTOL webtool  and shows up like this. </p> <p></p> <p>Now, let's run the inference. </p> <p><code>asr.AnnotAceR -nwk kari_ancestors.nwk -in NADPH_kcat@experiments.txt -latent 3 -marg -internal -params params_NADPH_kcat.json -out tst_NADPH_kcat.txt -format ITOL -seed 1 -tied</code></p> <p>Sampling from Gaussian mixture at each uninstantiated node gives:</p> <p></p> <p>Change <code>-format TSV</code> gives a file with this \"head\".</p> <pre><code>Ancestor    NADPH_kcat\nN0  0.754645807596001\nN1  0.6482432683741166\nN2  0.6378986978798374\nN3  0.5932161625795987\nN4  0.5734614385345007\nN5  0.5261001211533353\ntr|A0A0A7GET6|A0A0A7GET6_GEOAI  0.4469566331089113\nN6  0.4536806953981594\nN7  0.44623041036501315\n</code></pre>"},{"location":"annotacer/#example-3","title":"Example 3","text":"<p><code>asr.AnnotAceR -nwk ancestors.nwk -in BRENDA_TS_DATA:BRENDA@annotations.txt -learn -tied -latent 3 -internal -params params_BRENDA_TS_DATA.json -out tst_BRENDA_TS_DATA.txt -format ITOL -seed 2</code></p> <p>learns a single mixture of Gaussians for the continuous property values in the column <code>BRENDA_TS_DATA</code> extracted by the parser <code>BRENDA</code>. The mixture is saved in a file <code>params_BRENDA_TS_DATA.json</code>;  the training data is re-saved for visualisation in iTOL as <code>tst_BRENDA_TS_DATA.txt</code>. Notice that the <code>-tied</code> variance option was used ensuring that the variance for each component is the same value, pooled from all the data. This is recommended if the data is sparse.</p> <p>The input tree file is on the Newick format with labelled extand and ancestor nodes (N0, ...), the other  input file <code>annotations.txt</code> is a TAB-separated value file (TSV), which is partially shown in Example 1 above.</p> <p>The Gaussian mixture file looks like this:</p> <pre><code>{\"Condition\":[[\"BRENDA_TS_DATA_1\"],[\"BRENDA_TS_DATA_2\"],[\"BRENDA_TS_DATA_3\"]],\n\"Pr\":[[89.33343935081669,51.919856563088985],\n[60.4077134808605,51.919856563088985],\n[35.758600529629916,51.919856563088985]],\n\"Variable\":{\"Domain\":{\"Predef\":\"Real\"},\"Name\":\"0_Real\"},\"Nodetype\":\"GDT\",\"TieVariance\":2,\"Index\":[0,1,2]}                    \n</code></pre> <p>The iTOL file follows the dataset format, so can be dropped into the iTOL webtool after the tree has been uploaded.</p> <p></p> <p>The inference for all other nodes can be done with the following command, making reference to the Gaussian mixture generated above:</p> <p><code>asr.AnnotAceR -nwk ancestors.nwk -in BRENDA_TS_DATA:BRENDA@annotations.txt -marg -tied -latent 3 -internal -params params_BRENDA_TS_DATA.json -out trn_BRENDA_TS_DATA.txt -format ITOL -seed 2</code></p> <p>The inference generates another file, in this case again on the iTOL format, enabling it to be used as a second dataset for visualisation. If you'd like it to be presented as a TSV file, use <code>-format TSV</code>.</p> <p>This is the iTOL visual (added ontop of the previous with training data):</p> <p></p>"},{"location":"graspcmd/","title":"GRASP command-line interface (CLI)","text":"<p>The best way to run GRASP is via its command-line interface.  It can prove useful if you want to automate tasks, run reconstructions on your own dedicated hardware, and/or access the latest features.  The command-line version allows access to a variety of indel inference approaches.  Beyond the default bi-directional edge encoding (BE), indels are available by either Position Specific (PS), or Simple Indel Coding (SIC).  Regardless of encoding, indels can be inferred using either Parsimony (P) or Maximum Likelihood (ML) methods.  his gives six methods: PS-P, PS-ML, SIC-P, SIC-ML, BE-P, BE-ML.</p> <p>The command-line version accepts a file with evolutionary rates inferred with the tree, as produced by several tools incl. IQ-TREE2.  The command-line interface is implemented in bnkit as a class <code>asr.GRASP</code>.</p>"},{"location":"graspcmd/#asrgrasp-what-can-it-do","title":"asr.GRASP: What can it do?","text":"<p>asr.GRASP accepts an alignment (FASTA or Clustal formats) and a phylogenetic tree (Newick format) with concordant labels, to infer ancestor sequences by joint or marginal reconstruction by maximum likelihood. In the process, the program also infers insertion and deletion events, which are internally represented via partial-order graphs; it also identifies the most supported path of sequence inclusions at each ancestor.</p> <p>The program can save all ancestor sequences (in the case of joint reconstruction) or one sequence (in the case of marginal reconstrution; optionally with character state distributions as a TSV file). It can save the partial-order graphs in JSON or as DOT files, which can be visualised with GraphViz. It can also re-save the tree with assigned ancestor labels.</p> <p>GRASP was designed primarily for protein sequences but the command-line version incorporates DNA models too. At this stage we have not tested DNA sequence functionality extensively, nor have we developed specific features around DNA sequences (codon-centric analyses, user-provided background stats, etc).</p>"},{"location":"graspcmd/#asrgrasp-how-do-i-make-it-work-on-my-computer","title":"asr.GRASP: How do I make it work on my computer?","text":"<p>First, you will need Java version 11 or newer. Any operating system with Java should work, including Mac OS, MS Windows and Linux.</p> <p>You then clone bnkit in its entirety. You may need JUnit 5 testing to get everything working; this is only required if you want to run software tests, say if you are a developer.</p>"},{"location":"graspcmd/#asrgrasp-how-do-i-run-it","title":"asr.GRASP: How do I run it?","text":"<ol> <li>Compile the jar file</li> </ol> <p>We suggest that you then follow steps 2 onwards, but likely you can simply run it from the directory to which it was downloaded, e.g. <code>java -jar ~/Downloads/bnkit.jar</code> should produce the help info below.</p> <ol> <li>Create a bash script grasp that contains the following two lines, replacing the path with the path to your downloaded jar</li> </ol> <p><code>console    #!/bin/sh    java -jar -Xmx16g &lt;/path/to/bnkit.jar&gt; $@</code></p> <p>(the <code>-Xmx</code> is optional; see below)</p> <ol> <li>Change permissions on the bash script</li> </ol> <pre><code>chmod 755 grasp\n</code></pre> <ol> <li>Place the file <code>grasp</code> where you store your executable files, for example <code>/usr/local/bin</code></li> </ol> <pre><code>mv grasp /usr/local/bin\n</code></pre> <ol> <li>Check that it works</li> </ol> <pre><code>grasp -h\n</code></pre> <p>This will print out the arguments that specifies your input data and options.</p> <p>A typical command may look like this</p> <pre><code>grasp --aln 500_2112_dhad_18032019.aln --nwk r_500_2112_dhad_18032019.nwk -output-folder recon_0500 --verbose --threads 5\n</code></pre> <p>Full help information</p> <pre><code>Usage: asr.GRASP \n    [-a | --aln &lt;filename&gt;]\n    [-n | --nwk &lt;filename&gt;]\n    {-o | --output-folder &lt;foldername&gt;} (default is current working folder, or input folder if available)\n    {-i | --input-folder &lt;foldername&gt;}\n    {-pre | --prefix &lt;stub&gt;}\n    {-rf | --rates-file &lt;filename&gt;}\n    {-s | --substitution-model &lt;JTT(default)|Dayhoff|LG|WAG|JC|Yang&gt;}\n    {-t | --threads &lt;number&gt;}\n    {-j | --joint (default)}\n    {-m | --marginal &lt;branchpoint-id&gt;}\n    {--indel-method &lt;methodname&gt;} (select one from BEP(default) BEML SICP SICML PSP PSML)\n    {--supported-path &lt;methodname&gt;} (select one from DIJKSTRA(default) ASTAR)\n    {--nogap}\n    {--nonibble}\n    {--exclude-noedge}\n    {--save-as &lt;list-of-formats&gt;} (select multiple from FASTA CLUSTAL TREE DISTRIB ASR DOT TREES TrAVIS)\n    {--save-all} (saves reconstruction with ALL formats)\n    {--save-tree} (bypasses inference and re-saves the tree with ancestor nodes labelled as per GRASP's\n    depth-first labelling scheme starting with N0)\n    {--save-poag { &lt;branchpoint-id&gt; } (bypasses inference and saves the input alignment as a POAG\n    (partial order alignment graph of extant sequences under specified ancestor [default N0])\n    {--time}{--verbose}{--help}\n\nInference is a two-stage process:\n    (1) A history of indel events is inferred by either maximum likelihood or maximum parsimony and \n    mapped onto the tree to determine what positions contain actual sequence content\n    (2) For each ancestral position, the most probable character is assigned to each phylogenetic branch \n    point when performing a joint reconstruction. Alternatively, for each \n    position at a nominated branch point, the probability distribution over all possible \n    characters is inferred when performing a marginal reconstruction.\n    Finally, edges are drawn to represent all inferred combinations of indels to form an ancestor POG \n    with nodes that can form a valid sequence with inferred content; a preferred path\n    through the POG is then inferred, nominating a single, best supported sequence.\n\nMode of character inference:\n    -j (or --joint) activates joint reconstruction (default), \n    -m (or --marginal) activates marginal reconstruction (requires a branch-point to be nominated)\n    --onlyindel disengages the stage of character state inference\n\nRequired arguments:\n    -a (or --aln) must specify the name of a multiple-sequence alignment file on FASTA or CLUSTAL format\n    -n (or --nwk) must specify the name of a phylogenetic-tree file on Newick format\n\nOptional arguments:\n    -o (or --output-folder) specifies the folder that will be used to save output files,\n        e.g. inferred ancestor or ancestors, tree, etc. as specified by format\n    -i (or --input-folder) skips indel inference, and loads a previous reconstruction from specified folder\n    -sa (or --save-as) lists the files and formats to be generated (see below)\n    --save-all nominates all\n    -pre (or --prefix) specifies a stub that is added to result filenames (default is the prefix of the alignment file)\n    -indel (or --indel-method) specifies what method to use for inferring indels (see below)\n    -s (or --substitution-model) specifies what evolutionary model to use for inferring character states (see below)\n    -rf (or --rates-file) specifies a tabulated file with relative, position-specific substitution rates\n        We recommend the use of this generally, but specifically for trees with great distances, and with biologically diverse entries\n        As an example, IQ-TREE produces rates on the accepted format\n    --include-extants means that extants are included in output files (when the format allows)\n    --nogap means that the gap-character is excluded in the resulting output (when the format allows)\n    --nonibble de-activates the removal of indices in partial order graphs that cannot form a path from start to end\n    --orphans de-activates the removal of orphaned indel trees\n    --exclude-noedge removes non-existing edge as an option for parsimony in BEP\n    --verbose prints out information about steps undertaken, and --time the time it took to finish\n    -h (or --help) will print out this screen\n\nFiles/formats: \n    FASTA: sequences (most preferred path at each ancestor, gapped or not gapped)\n    CLUSTAL: sequences (most preferred path at each ancestor, gapped)\n    TREE: phylogenetic tree with ancestor nodes labelled\n    DISTRIB: character distributions for each position (indexed by POG, only available for marginal reconstruction)\n    ASR: complete reconstruction as JSON, incl. POGs of ancestors and extants, and tree (ASR.json)\n    DOT: partial-order graphs of ancestors in DOT format\n    TREES: position-specific trees with ancestor states labelled\n    TrAVIS: Produce a report for reconstruction\n\nIndel-methods: \n    BEP: bi-directional edge (maximum) parsimony\n    BEML: bi-directional edge maximum likelihood (uses uniform evolutionary model akin to JC)\n    SICP: simple indel-coding (maximum) parsimony (based on Simmons and Ochoterena)\n    SICML: simple indel-coding maximum likelihood (uses uniform evolutionary model)\n    PSP: position-specific (maximum) parsimony\n    PSML: position-specific maximum likelihood (uses uniform evolutionary model)\n    Add '*' to method name for less conservative setting (if available)\n\nSubstitution-models: \n    JTT: Jones-Taylor-Thornton (protein; default)\n    Dayhoff: Dayhoff-Schwartz-Orcutt (protein)\n    LG: Le-Gasquel (protein)\n    WAG: Whelan-Goldman (protein)\n    JC: Jukes-Cantor (DNA)\n    Yang: Yang's general reversible process model (DNA)\n\nNotes: \n    Greater number of threads may improve processing time up to a point when coordination chokes performance; default is 4 threads.\n    Running GRASP requires large memory and in most cases Java needs to be run with the option -Xmx20g, \n    where 20g specifies that 20GB of RAM should be available.\n\n~ This is version 25-Mar-2025 ~\n</code></pre>"},{"location":"graspcmd/#what-else","title":"What else?","text":"<p>Running the command-line version is typically a quicker affair, at least for smaller reconstructions, but it requires decent hardware. A reconstruction of less than 1,000 sequences should take less than 10 minutes.</p> <p>You can probably run a reconstruction with 10,000 sequences on a server, but how \"gappy\" the alignment is will also play a part in deciding this. If the alignment is reasonably clean, a powerful, modern laptop with at least 16GB of memory, can do this in under a day. If the alignment covers a diverse family, you will probably need a lot more memory. We recommend you set the Java heap size to 60GB RAM, which you can using the option <code>-Xmx60000m</code>.</p> <p>The rough estimates above assume you use multiple threads; we recommend 5 or so on decent hardware (<code>--threads 5</code>).</p>"},{"location":"json-api/","title":"JSON API","text":""},{"location":"json-api/#requests-for-asrgserver","title":"Requests for <code>asr.GServer</code>","text":"<pre><code>{ \"Command\":&lt;request&gt;,\n  \"Job\":&lt;job-number&gt; }\n</code></pre>"},{"location":"json-api/#request-is-retrieve","title":"<code>&lt;request&gt;</code> is <code>\"Retrieve\"</code>","text":"<p>Recover the original request under the specified job-number</p>"},{"location":"json-api/#request-is-output","title":"<code>&lt;request&gt;</code> is <code>\"Output\"</code>","text":"<p>Return the result of the request under the specified job-number on the format</p> <pre><code>{ \"Job\":&lt;job-number&gt;,\n  \"Result\":{&lt;result-JSON&gt;} }\n</code></pre>"},{"location":"json-api/#request-is-place","title":"<code>&lt;request&gt;</code> is <code>\"Place\"</code>","text":"<p>Find the place in queue of the request under the specified job-number</p>"},{"location":"json-api/#list-all-jobs","title":"List all jobs","text":"<pre><code>{ \"Command\":\"Status\"}\n</code></pre> <p>returns</p> <pre><code>{ \"Jobs\":[&lt;list-of-jobs&gt;],\n  \"Clients\":&lt;number-of-clients&gt;}\n</code></pre> <p>for example</p> <pre><code>{ \"Jobs\":[\n    { \"Status\":\"COMPLETED\",\"Threads\":1,\"Command\":\"Fake\",\"Priority\":0,\"Memory\":1,\"Auth\":\"Guest\",\"Job\":1,\"Place\":0 },\n    { \"Status\":\"COMPLETED\",\"Threads\":1,\"Command\":\"Fake\",\"Priority\":0,\"Memory\":1,\"Auth\":\"Guest\",\"Job\":2,\"Place\":0 },\n    { \"Status\":\"RUNNING\",\"Threads\":1,\"Command\":\"Fake\",\"Priority\":0,\"Memory\":1,\"Auth\":\"Guest\",\"Job\":3,\"Place\":0 },\n    { \"Status\":\"WAITING\",\"Threads\":1,\"Command\":\"Fake\",\"Priority\":0,\"Memory\":1,\"Auth\":\"Guest\",\"Job\":4,\"Place\":1 }],\n  \"Clients\":1 }\n</code></pre>"},{"location":"json-api/#commands-for-asrgserver","title":"Commands for <code>asr.GServer</code>","text":"<p>Execute/submit job; a \"command\" is a request that will require the server to dedicate resources both in terms of memory and CPU time,  which is why it is allocated a \"job-number\" and typically queued </p> <pre><code>{ \"Command\":&lt;command&gt;,\n  \"Auth\":&lt;auth-token&gt;,\n  \"Params\":&lt;params&gt; }\n</code></pre> <p>Server returns (if queued) </p> <pre><code>{ \"Message\":\"Queued\",\"Job\":&lt;job-number&gt; }\n</code></pre> <p>or runs job directly (based on <code>request.isQueued()</code>) and returns result</p>"},{"location":"json-api/#create-input-for-reconstruction-command-is-pogit","title":"Create input for reconstruction: <code>&lt;command&gt;</code> is <code>\"Pogit\"</code>","text":"<p><code>&lt;params&gt;</code> is</p> <pre><code>{ \"Tree\":&lt;tree&gt;,\n  \"Alignment\":&lt;alignment&gt; }\n</code></pre> <p>Result is a <code>&lt;POGTree&gt;</code></p> <pre><code>{ \n  }\n</code></pre>"},{"location":"json-api/#run-reconstruction-command-is-recon","title":"Run reconstruction: <code>&lt;command&gt;</code> is <code>\"Recon\"</code>","text":"<p><code>&lt;params&gt;</code> is</p> <pre><code>{ \"Tree\":&lt;tree&gt;,\n  \"Alignment\":&lt;alignment&gt;,\n  &lt;optional-args&gt; }\n</code></pre> <p>or </p> <pre><code>{ \"POGTree\":&lt;POGtree&gt;, \n  &lt;optional-args&gt;}\n</code></pre> <p>and</p> <p><code>&lt;optional-args&gt;</code> is</p> <pre><code>\"Inference\":\"Joint\", (or) \"Inference\":\"Marginal\",\"Ancestor\":&lt;anc-ID&gt;,\n\"Indels\":&lt;indel-method&gt;,\n\"Model\":&lt;subst-model&gt;,\n\"Rates\":[&lt;rate-pos1&gt;,&lt;rate-pos2&gt;, ...]\n</code></pre> <p>where <code>&lt;indel-method&gt;</code> is <code>\"BEP\"</code> (default), <code>\"BEML\"</code>, <code>\"SICP\"</code>, <code>\"SICML\"</code>, <code>\"PSP\"</code>, or <code>\"PSML\"</code>; <code>&lt;subst-model&gt;</code> is <code>\"JTT\"</code> (default), <code>\"Dayhoff\"</code>, <code>\"LG\"</code>, <code>\"WAG\"</code>, <code>\"JC\"</code>, or <code>\"Yang\"</code>.</p> <p>Result is</p> <pre><code>\"GRASP_version\":&lt;GRASP-version&gt;,\n\"Ancestors\":[&lt;list-of-POGs&gt;]\n</code></pre>"},{"location":"json-api/#example","title":"Example","text":"<pre><code>{ \"Command\":\"Recon\",\n  \"Auth\":\"Guest\",\n  \"Params\":\n    { \"Alignment\":\n        { \"Sequences\":[{\"Seq\":[null,null,null,\"L\",null],\"Name\":\"sequence38\"},{\"Seq\":[null,null,null,null,\"R\"],\"Name\":\"sequence64\"},{\"Seq\":[null,null,\"S\",null,\"R\"],\"Name\":\"sequence87\"},{\"Seq\":[null,null,\"A\",null,\"C\"],\"Name\":\"sequence77\"},{\"Seq\":[null,null,\"A\",null,\"C\"],\"Name\":\"sequence110\"},{\"Seq\":[null,null,null,\"V\",\"T\"],\"Name\":\"sequence239\"},{\"Seq\":[null,null,null,\"I\",null],\"Name\":\"sequence101\"},{\"Seq\":[null,null,\"A\",null,\"E\"],\"Name\":\"sequence203\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence30\"},{\"Seq\":[null,null,\"R\",null,\"H\"],\"Name\":\"sequence99\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence60\"},{\"Seq\":[null,\"T\",\"T\",null,\"F\"],\"Name\":\"sequence50\"},{\"Seq\":[null,\"T\",\"T\",null,\"F\"],\"Name\":\"sequence111\"},{\"Seq\":[null,\"T\",\"A\",null,\"Y\"],\"Name\":\"sequence197\"},{\"Seq\":[null,null,\"A\",null,\"I\"],\"Name\":\"sequence72\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence229\"},{\"Seq\":[null,null,null,\"V\",\"D\"],\"Name\":\"sequence3\"},{\"Seq\":[null,null,null,\"I\",\"D\"],\"Name\":\"sequence125\"},{\"Seq\":[null,null,\"L\",null,\"H\"],\"Name\":\"sequence86\"},{\"Seq\":[null,null,\"S\",null,\"H\"],\"Name\":\"sequence237\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence79\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence75\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence62\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence209\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence117\"},{\"Seq\":[null,null,\"A\",null,\"K\"],\"Name\":\"sequence191\"},{\"Seq\":[null,null,\"A\",null,\"Q\"],\"Name\":\"sequence56\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence137\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence1\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence66\"},{\"Seq\":[null,null,\"Q\",null,\"Q\"],\"Name\":\"sequence212\"},{\"Seq\":[\"L\",\"G\",\"E\",null,\"H\"],\"Name\":\"sequence108\"},{\"Seq\":[\"L\",\"G\",\"E\",null,\"H\"],\"Name\":\"sequence228\"},{\"Seq\":[null,\"T\",\"E\",null,\"F\"],\"Name\":\"sequence68\"},{\"Seq\":[null,\"T\",\"A\",null,\"F\"],\"Name\":\"sequence216\"},{\"Seq\":[null,null,\"A\",null,\"C\"],\"Name\":\"sequence95\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence113\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence73\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence57\"},{\"Seq\":[null,null,\"A\",null,\"D\"],\"Name\":\"sequence6\"},{\"Seq\":[null,null,\"A\",null,\"D\"],\"Name\":\"sequence52\"},{\"Seq\":[null,null,\"T\",null,\"H\"],\"Name\":\"sequence139\"},{\"Seq\":[null,null,\"E\",null,\"H\"],\"Name\":\"sequence47\"},{\"Seq\":[null,null,\"E\",null,\"H\"],\"Name\":\"sequence234\"},{\"Seq\":[null,null,\"A\",null,\"T\"],\"Name\":\"sequence159\"},{\"Seq\":[null,null,\"A\",null,\"C\"],\"Name\":\"sequence247\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence39\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence8\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence119\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence33\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence210\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence43\"},{\"Seq\":[null,null,\"E\",null,\"K\"],\"Name\":\"sequence121\"},{\"Seq\":[null,null,\"E\",null,\"K\"],\"Name\":\"sequence92\"},{\"Seq\":[null,null,\"S\",null,\"K\"],\"Name\":\"sequence27\"},{\"Seq\":[null,null,\"A\",null,\"K\"],\"Name\":\"sequence170\"},{\"Seq\":[null,null,\"G\",null,\"H\"],\"Name\":\"sequence231\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence54\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence168\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence219\"},{\"Seq\":[null,null,\"T\",null,\"R\"],\"Name\":\"sequence7\"},{\"Seq\":[null,null,\"T\",null,\"R\"],\"Name\":\"sequence199\"},{\"Seq\":[null,null,\"T\",null,\"R\"],\"Name\":\"sequence97\"},{\"Seq\":[null,null,\"T\",null,\"R\"],\"Name\":\"sequence74\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence134\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence179\"}],\n          \"Datatype\":{\"Predef\":\"Protein\"} },\n      \"Tree\":\n        { \"Parents\":[-1,0,1,2,3,4,5,6,7,7,6,5,11,11,4,3,15,16,16,15,19,19,21,21,2,24,25,26,27,28,28,27,26,25,33,33,35,36,37,37,36,35,41,41,24,44,44,1,47,48,49,50,50,49,48,54,54,47,0,58,59,59,61,62,63,64,64,66,66,63,69,69,62,72,72,74,75,76,76,75,79,79,74,82,83,83,82,61,87,88,88,90,90,87,93,93,58,96,97,98,98,100,100,97,103,104,105,106,106,105,109,109,104,103,113,113,96,116,117,117,119,119,116,122,123,124,125,125,124,123,122],\n          \"Labels\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"sequence47\",\"sequence234\",\"sequence212\",\"8\",\"sequence108\",\"sequence228\",\"sequence87\",\"9\",\"10\",\"sequence50\",\"sequence111\",\"11\",\"sequence197\",\"12\",\"sequence68\",\"sequence216\",\"13\",\"14\",\"15\",\"16\",\"17\",\"sequence159\",\"sequence247\",\"sequence95\",\"sequence72\",\"18\",\"sequence229\",\"19\",\"20\",\"21\",\"sequence168\",\"sequence219\",\"sequence39\",\"22\",\"sequence8\",\"sequence119\",\"23\",\"sequence77\",\"sequence110\",\"24\",\"25\",\"26\",\"27\",\"sequence3\",\"sequence125\",\"sequence239\",\"28\",\"sequence101\",\"sequence203\",\"sequence38\",\"29\",\"30\",\"sequence64\",\"31\",\"32\",\"33\",\"34\",\"sequence113\",\"35\",\"sequence33\",\"sequence210\",\"36\",\"sequence73\",\"sequence57\",\"37\",\"sequence86\",\"38\",\"39\",\"40\",\"sequence7\",\"sequence199\",\"41\",\"sequence97\",\"sequence74\",\"42\",\"43\",\"sequence134\",\"sequence179\",\"sequence43\",\"44\",\"45\",\"sequence237\",\"46\",\"sequence6\",\"sequence52\",\"47\",\"sequence79\",\"sequence75\",\"48\",\"49\",\"50\",\"sequence30\",\"51\",\"sequence62\",\"sequence209\",\"52\",\"53\",\"54\",\"55\",\"sequence121\",\"sequence92\",\"56\",\"sequence27\",\"sequence170\",\"sequence117\",\"57\",\"sequence191\",\"sequence56\",\"58\",\"59\",\"sequence99\",\"60\",\"sequence137\",\"sequence1\",\"61\",\"62\",\"63\",\"64\",\"sequence231\",\"sequence54\",\"sequence139\",\"sequence66\",\"sequence60\"],\n          \"Distances\":[0,0.086838,0.023163,0.026222,0.342957,0.02521,0.051304,0.174255,0.145796,0.145796,0.320051,0.284419,0.086936,0.086936,0.396566,0.477527,0.258728,0.003268,0.003268,0.142402,0.119593,0.040549,0.079044,0.079044,0.169549,0.077884,0.066855,0.092639,0.041577,0.317241,0.317241,0.358819,0.451456,0.392445,0.125867,0.016502,0.05269,0.054446,0.002228,0.002228,0.056674,0.101538,0.007827,0.007827,0.361893,0.234304,0.234304,0.050065,0.02764,0.248498,0.3683,0.094405,0.094405,0.462704,0.048629,0.662573,0.662573,0.738842,0.058064,0.0922,0.725482,0.077351,0.028822,0.270835,0.164158,0.184316,0.121621,0.062695,0.062695,0.234931,0.113543,0.113543,0.08903,0.530278,0.079736,0.262731,0.11578,0.072031,0.072031,0.031693,0.156119,0.156119,0.352005,0.064503,0.034035,0.034035,0.098538,0.192432,0.014164,0.441535,0.44106,4.74E-4,4.74E-4,0.246016,0.209683,0.209683,0.081914,0.014711,0.473628,0.247428,0.019549,0.22788,0.22788,0.152647,0.180719,0.005074,0.365646,0.016972,0.016972,0.122938,0.25968,0.25968,0.387692,0.119619,0.448791,0.448791,0.240317,0.012407,0.483044,0.099375,0.38367,0.38367,0.071027,0.021988,0.161969,0.129501,0.110966,0.110966,0.240467,0.402436,0.424423],\n          \"Branchpoints\":131 } } }\n</code></pre> <p>As a one-line JSON-string:</p> <pre><code>{\"Command\":\"Recon\",\"Auth\":\"Guest\",\"Params\":{\"Alignment\":{\"Sequences\":[{\"Seq\":[null,null,null,\"L\",null],\"Name\":\"sequence38\"},{\"Seq\":[null,null,null,null,\"R\"],\"Name\":\"sequence64\"},{\"Seq\":[null,null,\"S\",null,\"R\"],\"Name\":\"sequence87\"},{\"Seq\":[null,null,\"A\",null,\"C\"],\"Name\":\"sequence77\"},{\"Seq\":[null,null,\"A\",null,\"C\"],\"Name\":\"sequence110\"},{\"Seq\":[null,null,null,\"V\",\"T\"],\"Name\":\"sequence239\"},{\"Seq\":[null,null,null,\"I\",null],\"Name\":\"sequence101\"},{\"Seq\":[null,null,\"A\",null,\"E\"],\"Name\":\"sequence203\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence30\"},{\"Seq\":[null,null,\"R\",null,\"H\"],\"Name\":\"sequence99\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence60\"},{\"Seq\":[null,\"T\",\"T\",null,\"F\"],\"Name\":\"sequence50\"},{\"Seq\":[null,\"T\",\"T\",null,\"F\"],\"Name\":\"sequence111\"},{\"Seq\":[null,\"T\",\"A\",null,\"Y\"],\"Name\":\"sequence197\"},{\"Seq\":[null,null,\"A\",null,\"I\"],\"Name\":\"sequence72\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence229\"},{\"Seq\":[null,null,null,\"V\",\"D\"],\"Name\":\"sequence3\"},{\"Seq\":[null,null,null,\"I\",\"D\"],\"Name\":\"sequence125\"},{\"Seq\":[null,null,\"L\",null,\"H\"],\"Name\":\"sequence86\"},{\"Seq\":[null,null,\"S\",null,\"H\"],\"Name\":\"sequence237\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence79\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence75\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence62\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence209\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence117\"},{\"Seq\":[null,null,\"A\",null,\"K\"],\"Name\":\"sequence191\"},{\"Seq\":[null,null,\"A\",null,\"Q\"],\"Name\":\"sequence56\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence137\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence1\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence66\"},{\"Seq\":[null,null,\"Q\",null,\"Q\"],\"Name\":\"sequence212\"},{\"Seq\":[\"L\",\"G\",\"E\",null,\"H\"],\"Name\":\"sequence108\"},{\"Seq\":[\"L\",\"G\",\"E\",null,\"H\"],\"Name\":\"sequence228\"},{\"Seq\":[null,\"T\",\"E\",null,\"F\"],\"Name\":\"sequence68\"},{\"Seq\":[null,\"T\",\"A\",null,\"F\"],\"Name\":\"sequence216\"},{\"Seq\":[null,null,\"A\",null,\"C\"],\"Name\":\"sequence95\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence113\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence73\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence57\"},{\"Seq\":[null,null,\"A\",null,\"D\"],\"Name\":\"sequence6\"},{\"Seq\":[null,null,\"A\",null,\"D\"],\"Name\":\"sequence52\"},{\"Seq\":[null,null,\"T\",null,\"H\"],\"Name\":\"sequence139\"},{\"Seq\":[null,null,\"E\",null,\"H\"],\"Name\":\"sequence47\"},{\"Seq\":[null,null,\"E\",null,\"H\"],\"Name\":\"sequence234\"},{\"Seq\":[null,null,\"A\",null,\"T\"],\"Name\":\"sequence159\"},{\"Seq\":[null,null,\"A\",null,\"C\"],\"Name\":\"sequence247\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence39\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence8\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence119\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence33\"},{\"Seq\":[null,null,\"A\",null,\"R\"],\"Name\":\"sequence210\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence43\"},{\"Seq\":[null,null,\"E\",null,\"K\"],\"Name\":\"sequence121\"},{\"Seq\":[null,null,\"E\",null,\"K\"],\"Name\":\"sequence92\"},{\"Seq\":[null,null,\"S\",null,\"K\"],\"Name\":\"sequence27\"},{\"Seq\":[null,null,\"A\",null,\"K\"],\"Name\":\"sequence170\"},{\"Seq\":[null,null,\"G\",null,\"H\"],\"Name\":\"sequence231\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence54\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence168\"},{\"Seq\":[null,null,\"A\",null,\"N\"],\"Name\":\"sequence219\"},{\"Seq\":[null,null,\"T\",null,\"R\"],\"Name\":\"sequence7\"},{\"Seq\":[null,null,\"T\",null,\"R\"],\"Name\":\"sequence199\"},{\"Seq\":[null,null,\"T\",null,\"R\"],\"Name\":\"sequence97\"},{\"Seq\":[null,null,\"T\",null,\"R\"],\"Name\":\"sequence74\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence134\"},{\"Seq\":[null,null,\"A\",null,\"H\"],\"Name\":\"sequence179\"}],\"Datatype\":{\"Predef\":\"Protein\"}},\"Tree\":{\"Parents\":[-1,0,1,2,3,4,5,6,7,7,6,5,11,11,4,3,15,16,16,15,19,19,21,21,2,24,25,26,27,28,28,27,26,25,33,33,35,36,37,37,36,35,41,41,24,44,44,1,47,48,49,50,50,49,48,54,54,47,0,58,59,59,61,62,63,64,64,66,66,63,69,69,62,72,72,74,75,76,76,75,79,79,74,82,83,83,82,61,87,88,88,90,90,87,93,93,58,96,97,98,98,100,100,97,103,104,105,106,106,105,109,109,104,103,113,113,96,116,117,117,119,119,116,122,123,124,125,125,124,123,122],\"Labels\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"sequence47\",\"sequence234\",\"sequence212\",\"8\",\"sequence108\",\"sequence228\",\"sequence87\",\"9\",\"10\",\"sequence50\",\"sequence111\",\"11\",\"sequence197\",\"12\",\"sequence68\",\"sequence216\",\"13\",\"14\",\"15\",\"16\",\"17\",\"sequence159\",\"sequence247\",\"sequence95\",\"sequence72\",\"18\",\"sequence229\",\"19\",\"20\",\"21\",\"sequence168\",\"sequence219\",\"sequence39\",\"22\",\"sequence8\",\"sequence119\",\"23\",\"sequence77\",\"sequence110\",\"24\",\"25\",\"26\",\"27\",\"sequence3\",\"sequence125\",\"sequence239\",\"28\",\"sequence101\",\"sequence203\",\"sequence38\",\"29\",\"30\",\"sequence64\",\"31\",\"32\",\"33\",\"34\",\"sequence113\",\"35\",\"sequence33\",\"sequence210\",\"36\",\"sequence73\",\"sequence57\",\"37\",\"sequence86\",\"38\",\"39\",\"40\",\"sequence7\",\"sequence199\",\"41\",\"sequence97\",\"sequence74\",\"42\",\"43\",\"sequence134\",\"sequence179\",\"sequence43\",\"44\",\"45\",\"sequence237\",\"46\",\"sequence6\",\"sequence52\",\"47\",\"sequence79\",\"sequence75\",\"48\",\"49\",\"50\",\"sequence30\",\"51\",\"sequence62\",\"sequence209\",\"52\",\"53\",\"54\",\"55\",\"sequence121\",\"sequence92\",\"56\",\"sequence27\",\"sequence170\",\"sequence117\",\"57\",\"sequence191\",\"sequence56\",\"58\",\"59\",\"sequence99\",\"60\",\"sequence137\",\"sequence1\",\"61\",\"62\",\"63\",\"64\",\"sequence231\",\"sequence54\",\"sequence139\",\"sequence66\",\"sequence60\"],\"Distances\":[0,0.086838,0.023163,0.026222,0.342957,0.02521,0.051304,0.174255,0.145796,0.145796,0.320051,0.284419,0.086936,0.086936,0.396566,0.477527,0.258728,0.003268,0.003268,0.142402,0.119593,0.040549,0.079044,0.079044,0.169549,0.077884,0.066855,0.092639,0.041577,0.317241,0.317241,0.358819,0.451456,0.392445,0.125867,0.016502,0.05269,0.054446,0.002228,0.002228,0.056674,0.101538,0.007827,0.007827,0.361893,0.234304,0.234304,0.050065,0.02764,0.248498,0.3683,0.094405,0.094405,0.462704,0.048629,0.662573,0.662573,0.738842,0.058064,0.0922,0.725482,0.077351,0.028822,0.270835,0.164158,0.184316,0.121621,0.062695,0.062695,0.234931,0.113543,0.113543,0.08903,0.530278,0.079736,0.262731,0.11578,0.072031,0.072031,0.031693,0.156119,0.156119,0.352005,0.064503,0.034035,0.034035,0.098538,0.192432,0.014164,0.441535,0.44106,4.74E-4,4.74E-4,0.246016,0.209683,0.209683,0.081914,0.014711,0.473628,0.247428,0.019549,0.22788,0.22788,0.152647,0.180719,0.005074,0.365646,0.016972,0.016972,0.122938,0.25968,0.25968,0.387692,0.119619,0.448791,0.448791,0.240317,0.012407,0.483044,0.099375,0.38367,0.38367,0.071027,0.021988,0.161969,0.129501,0.110966,0.110966,0.240467,0.402436,0.424423],\"Branchpoints\":131}}}\n</code></pre> <p>which results in </p> <pre><code>{ \"Job\":14,\n  \"Result\":\n    { \"GRASP_version\":\"12-Dec-2022\",\n      \"Ancestors\":[\n        { \"Adjacent\":[[4],[]],\"Starts\":[2],\"Edgeindices\":[[2,4],[-1,2],[4,5]],\"Nodetype\":\"class dat.pog.SymNode\",\"Size\":5,\"Indices\":[2,4],\"GRASP_version\":\"12-Dec-2022\",\"Directed\":true,\"Terminated\":true,\"Edges\":[{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0},{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0},{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0}],\"Nodes\":[{\"Value\":\"A\"},{\"Value\":\"H\"}],\"Datatype\":\"class dat.pog.POGraph\",\"Name\":\"0\",\"Ends\":[4],\"Edgetype\":\"class dat.pog.POGraph$BidirEdge\" },\n        { \"Adjacent\":[[4],[]],\"Starts\":[2],\"Edgeindices\":[[2,4],[-1,2],[4,5]],\"Nodetype\":\"class dat.pog.SymNode\",\"Size\":5,\"Indices\":[2,4],\"GRASP_version\":\"12-Dec-2022\",\"Directed\":true,\"Terminated\":true,\"Edges\":[{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0},{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0},{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0}],\"Nodes\":[{\"Value\":\"A\"},{\"Value\":\"H\"}],\"Datatype\":\"class dat.pog.POGraph\",\"Name\":\"1\",\"Ends\":[4],\"Edgetype\":\"class dat.pog.POGraph$BidirEdge\" },\n        { \"Adjacent\":[[4],[]],\"Starts\":[2],\"Edgeindices\":[[2,4],[-1,2],[4,5]],\"Nodetype\":\"class dat.pog.SymNode\",\"Size\":5,\"Indices\":[2,4],\"GRASP_version\":\"12-Dec-2022\",\"Directed\":true,\"Terminated\":true,\"Edges\":[{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0},{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0},{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0}],\"Nodes\":[{\"Value\":\"A\"},{\"Value\":\"H\"}],\"Datatype\":\"class dat.pog.POGraph\",\"Name\":\"2\",\"Ends\":[4],\"Edgetype\":\"class dat.pog.POGraph$BidirEdge\" },\n        { ... } ... ] } }\n</code></pre> <p>Note: consider returning the full package with input data, i.e.</p> <pre><code>{ \"Prediction\":{\"Input\":{&lt;input-JSON&gt;},\n                \"Ancestors\":[&lt;list-of-POGs&gt;],\n                \"Datatype\":\"Prediction\"}}}\n</code></pre>"},{"location":"json-api/#train-bp2prop-model-command-is-train","title":"Train BP2Prop model: <code>&lt;command&gt;</code> is <code>\"Train\"</code>","text":"<p><code>&lt;params&gt;</code> is</p> <pre><code>{ \"Tree\":&lt;tree&gt;,\n  \"Dataset\":&lt;dataset&gt;,\n  \"States\":[&lt;state1&gt;,&lt;state2&gt;,...],\n  &lt;optional-args&gt; }\n</code></pre> <p>where <code>&lt;dataset&gt;</code> specifies a data set (see below).</p> <p>and</p> <p><code>&lt;optional-args&gt;</code> is</p> <pre><code>  \"Distrib\":&lt;bnode&gt;,\n  \"Leaves-only\":&lt;true/false&gt;,\n  \"Rate\":&lt;rate&gt;,\n  \"Seed\":&lt;seed&gt;,\n  \"Gamma\":&lt;gamma&gt;\n</code></pre> <p>where <code>&lt;bnode&gt;</code> specifies a probability distribution appropriate for the values in the <code>&lt;dataset&gt;</code>  (see below, <code>bnode</code> is actually a part of a Bayesian network).  If you specify one, it will be used as a starting point for training.</p> <p>The result is a new/refined distribution (see example below).</p>"},{"location":"json-api/#example-continuous","title":"Example (continuous)","text":"<pre><code>{ \"Command\":\"Train\",\n  \"Auth\":\"Guest\",\n  \"Params\":\n    { \"States\":[\"A\",\"B\"],\n      \"Dataset\":\n        { \"Headers\":[\"S009\",\"S005\",\"S002\",\"S006\",\"S003\",\"S001\",\"S008\",\"S010\",\"S004\",\"S007\"],\n          \"Data\":[[3.63],[3.81],[2.89],[3.81],[2.54],[2.76],[3.79],[3.7],[1.94],[3.97]]},\n          \"Tree\":&lt;tree&gt; } } }\n</code></pre> <p>which results in a Gaussian distribution, or <code>bnode</code> (mean and variance for each component, or latent value): </p> <pre><code>{ \"Distrib\":\n    { \"Condition\":[[\"A\"],[\"B\"]],\n      \"Pr\":[[3.784926135903969,0.056738891699391655],[2.5324588293595744,0.056738891699391655]],\n      \"Index\":[0,1],\n      \"Domain\":\"dat.Continuous@3bd5adde\" } }\n</code></pre>"},{"location":"json-api/#example-discrete","title":"Example (discrete)","text":"<pre><code>{ \"Command\":\"Train\",\n  \"Auth\":\"Guest\",\n  \"Params\":\n    { \"States\":[\"A\",\"B\",\"C\"],\n      \"Dataset\":\n        { \"Headers\":[\"H9B4I9\",\"B8Y1H0\",\"A8VWC5\",\"Q47R94\",\"Q1KLC8\",\"P29957\",\"B6RB08\",\"P04746\",\"P00690\",\"H2N0D4\",\"A0SEG1\",\"Q2KJQ1\",\"B8Y698\",\"P08144\",\"D4P4Y7\",\"T1WDH2\",\"T1WE96\",\"Q4A3E0\",\"Q8LJQ6\",\"P00693\",\"P17654\",\"P04063\",\"O33476\",\"O08452\",\"Q2QC88\",\"O93647\",\"Q6WUB6\",\"A0A060DAC6\",\"B1VK33\",\"P06279\",\"P00692\",\"P06278\",\"Q5UZY3\",\"L8B068\",\"D8J7H2\",\"A5ILB0\",\"P96107\",\"Q8A1G3\",\"P20845\"],\n          \"Data\":[[\"G\"],[\"G\"],[\"G\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"H\"],[\"Q\"],[\"G\"],[\"G\"],[\"G\"],[\"G\"],[\"A\"],[\"A\"],[\"A\"],[\"A\"],[\"G\"],[\"G\"],[\"G\"],[\"G\"],[\"A\"],[\"G\"],[\"G\"],[\"G\"],[\"A\"],[\"A\"],[\"L\"],[\"D\"],[\"G\"],[\"G\"],[\"G\"],[\"G\"],[\"G\"]] },\n      \"Tree\":\n        { \"Parents\":[-1,0,0,0,3,3,5,6,6,8,9,9,8,12,12,14,15,16,17,17,16,20,20,22,22,24,24,26,26,15,29,30,30,32,32,29,35,35,37,37,14,40,41,41,43,43,45,45,47,47,49,49,40,52,53,54,54,53,57,57,52,60,60,62,62,64,64,5,67,67,69,70,70,69,73,73],\n          \"Labels\":[\"0\",\"P08144\",\"B8Y698\",\"1\",\"Q2KJQ1\",\"2\",\"3\",\"P29957\",\"4\",\"5\",\"Q47R94\",\"Q1KLC8\",\"6\",\"Q4A3E0\",\"7\",\"8\",\"9\",\"10\",\"Q5UZY3\",\"L8B068\",\"11\",\"Q8A1G3\",\"12\",\"D8J7H2\",\"13\",\"P20845\",\"14\",\"A5ILB0\",\"P96107\",\"15\",\"16\",\"D4P4Y7\",\"17\",\"T1WDH2\",\"T1WE96\",\"18\",\"H9B4I9\",\"19\",\"B8Y1H0\",\"A8VWC5\",\"20\",\"21\",\"Q6WUB6\",\"22\",\"A0A060DAC6\",\"23\",\"B1VK33\",\"24\",\"P06279\",\"25\",\"P00692\",\"P06278\",\"26\",\"27\",\"28\",\"O33476\",\"O08452\",\"29\",\"Q2QC88\",\"O93647\",\"30\",\"Q8LJQ6\",\"31\",\"P00693\",\"32\",\"P17654\",\"P04063\",\"33\",\"B6RB08\",\"34\",\"35\",\"P04746\",\"P00690\",\"36\",\"H2N0D4\",\"A0SEG1\"],\n          \"Distances\":[0,0.243543659,0.328253867,0.061234395,0.302246327,0.104112732,0.129975033,0.492317028,0.168477423,0.472234961,5.0E-9,0.001470602,0.838140064,0.758927261,0.118993954,0.217610635,0.256851036,0.71053731,0.388091681,0.525286732,0.279916536,0.876914346,0.093326396,0.897751479,0.091555295,0.581536564,0.645218372,0.009417249,0.013626135,0.388197737,0.242001003,0.554412114,0.442555732,0.198231144,0.203377051,1.173898406,0.051873954,0.030364499,0.002987842,0.002295265,0.692720871,0.165853581,0.630412028,0.301179158,0.564737357,0.098304443,0.525139427,0.114171367,0.243352437,0.187788353,0.148531194,0.088716021,0.144788807,0.522130083,0.035341913,0.052453145,0.084658893,0.032451459,0.089455947,0.071707337,1.039127746,0.133051046,0.105731012,0.187271089,0.078869174,0.093152494,0.082644055,0.052339221,0.342080258,0.20996685,0.115876665,0.090541678,0.04644842,0.068089852,0.0917515,0.142809732],\n          \"Branchpoints\":76 } } }\n</code></pre> <p>which results in a discrete distribution (multinomial distributions, one for each component)</p> <pre><code>{ \"Distrib\":\n    { \"Condition\":[[\"A\"],[\"B\"],[\"C\"]],\n      \"Pr\":[\n        [0.91,      5.98E-79, 2.13E-27, 1.08E-39, 0.09,     3.29E-28],\n        [2.80E-122, 8.16E-65, 4.59E-31, 1.00,     1.76E-97, 2.65E-28],\n        [3.53E-91,  0.78,     0.11,     2.13E-13, 3.65E-65, 0.11    ] ],\n      \"Index\":[0,1,2],\n      \"Domain\":\n        { \"Size\":6,\n          \"Values\":[\"Q\",\"A\",\"D\",\"G\",\"H\",\"L\"],\n          \"Datatype\":\"String\" } } }\n</code></pre>"},{"location":"json-api/#infer-properties-command-is-infer","title":"Infer properties: <code>&lt;command&gt;</code> is <code>\"Infer\"</code>","text":"<p><code>&lt;params&gt;</code> is</p> <pre><code>{ \"Tree\":&lt;tree&gt;,\n  \"Dataset\":&lt;dataset&gt;,\n  \"States\":[&lt;state1&gt;,&lt;state2&gt;,...],\n  \"Distrib\":&lt;bnode&gt;,\n  &lt;optional-args&gt; }\n</code></pre> <p>where <code>&lt;bnode&gt;</code> must specify a distribution appropriate for the values in the <code>&lt;dataset&gt;</code> (see below);  <code>&lt;optional-args&gt;</code> is</p> <pre><code>  \"Leaves-only\":&lt;true/false&gt;,\n  \"Rate\":&lt;rate&gt;,\n  \"Seed\":&lt;seed&gt;,\n  \"Gamma\":&lt;gamma&gt;\n</code></pre> <p>Result is a new/refined distribution (see example below).</p>"},{"location":"json-api/#example-of-marginal-reconstruction-of-discrete-states","title":"Example of marginal reconstruction of discrete states","text":"<pre><code>{ \"Command\":\"Infer\",\n  \"Auth\":\"Guest\",\n  \"Params\":\n    { \"States\":[\"A\",\"B\"],\n      \"Leaves-only\":true,\n      \"Dataset\":\n        { \"Headers\":[\"S009\",\"S005\",\"S002\",\"S006\",\"S003\",\"S001\",\"S008\",\"S010\",\"S004\",\"S007\"],\"Data\":[[3.63,3.33],[3.81,3.21],[2.89,2.93],[3.81,3.51],[2.54,2.59],[2.76,2.96],[3.79,3.49],[3.7,3.4],[1.94,2.24],[3.97,3.44]] },\n      \"Tree\":&lt;tree&gt;,\n      \"Inference\":\"Marginal\",\n      \"Distrib\":\n        { \"Condition\":[[\"A\"],[\"B\"]],\"Pr\":[[3.784926135903969,0.056738891699391655],[2.532458829359575,0.056738891699391655]],\"Index\":[0,1],\"Domain\":\"dat.Continuous@3cf71bc7\"},\n      \"Ancestor\":0 } }\n</code></pre> <p>Server responds:</p> <pre><code>{ \"N0\":[\n    { \"Pr\":[0.6652270145537978,0.3347729854462022],\"Domain\":{\"Size\":2,\"Values\":[\"A\",\"B\"],\"Datatype\":\"String\"} },\n    { \"Pr\":[0.649968113685095,0.350031886314905],\"Domain\":{\"Size\":2,\"Values\":[\"A\",\"B\"],\"Datatype\":\"String\"} }] }\n</code></pre>"},{"location":"json-api/#example-with-joint-reconstruction-of-discrete-states","title":"Example with joint reconstruction of discrete states","text":"<pre><code>{ \"Command\":\"Infer\",\n  \"Auth\":\"Guest\",\n  \"Params\":\n    { \"States\":[\"a\",\"b\",\"c\",\"d\"],\n      \"Leaves-only\":true,\n      \"Dataset\":\n        { \"Headers\":[\"H9B4I9\",\"B8Y1H0\",\"A8VWC5\",\"Q47R94\",\"Q1KLC8\",\"P29957\",\"B6RB08\",\"P04746\",\"P00690\",\"H2N0D4\",\"A0SEG1\",\"Q2KJQ1\",\"B8Y698\",\"P08144\",\"D4P4Y7\",\"T1WDH2\",\"T1WE96\",\"Q4A3E0\",\"Q8LJQ6\",\"P00693\",\"P17654\",\"P04063\",\"O33476\",\"O08452\",\"Q2QC88\",\"O93647\",\"Q6WUB6\",\"A0A060DAC6\",\"B1VK33\",\"P06279\",\"P00692\",\"P06278\",\"Q5UZY3\",\"L8B068\",\"D8J7H2\",\"A5ILB0\",\"P96107\",\"Q8A1G3\",\"P20845\"],\n          \"Data\":[[\"G\"],[\"G\"],[\"G\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"Q\"],[\"H\"],[\"Q\"],[\"G\"],[\"G\"],[\"G\"],[\"G\"],[\"A\"],[\"A\"],[\"A\"],[\"A\"],[\"G\"],[\"G\"],[\"G\"],[\"G\"],[\"A\"],[\"G\"],[\"G\"],[\"G\"],[\"A\"],[\"A\"],[\"L\"],[\"D\"],[\"G\"],[\"G\"],[\"G\"],[\"G\"],[\"G\"] ] },\n      \"Tree\":{&lt;tree&gt;},\n      \"Inference\":\"Joint\",\n      \"Distrib\":{\"Condition\":[[\"a\"],[\"b\"],[\"c\"],[\"d\"]],\"Pr\":[[2.28E-71,1.71E-44,0.12,0.75,5.72E-55,0.12],[8.51E-84,5.14E-41,2.35E-34,1,7.81E-67,2.14E-32],[2.30E-70,0.99,4.48E-28,1.40E-11,1.78E-52,2.87E-28],[0.91,8.09E-66,4.53E-36,1.96E-42,0.09,4.35E-37]],\"Index\":[0,1,2,3],\"Domain\":{\"Size\":6,\"Values\":[\"Q\",\"A\",\"D\",\"G\",\"H\",\"L\"],\"Datatype\":\"String\"} } } }\n</code></pre> <p>Server responds with a (completed) dataset:</p> <pre><code>{ \"Predict\":\n    { \"Headers\":[\"N0\",\"P08144\",\"B8Y698\",\"N1\",\"Q2KJQ1\",\"N2\",\"N3\",\"P29957\",\"N4\",\"N5\",\"Q47R94\",\"Q1KLC8\",\"N6\",\"Q4A3E0\",\"N7\",\"N8\",\"N9\",\"N10\",\"Q5UZY3\",\"L8B068\",\"N11\",\"Q8A1G3\",\"N12\",\"D8J7H2\",\"N13\",\"P20845\",\"N14\",\"A5ILB0\",\"P96107\",\"N15\",\"N16\",\"D4P4Y7\",\"N17\",\"T1WDH2\",\"T1WE96\",\"N18\",\"H9B4I9\",\"N19\",\"B8Y1H0\",\"A8VWC5\",\"N20\",\"N21\",\"Q6WUB6\",\"N22\",\"A0A060DAC6\",\"N23\",\"B1VK33\",\"N24\",\"P06279\",\"N25\",\"P00692\",\"P06278\",\"N26\",\"N27\",\"N28\",\"O33476\",\"O08452\",\"N29\",\"Q2QC88\",\"O93647\",\"N30\",\"Q8LJQ6\",\"N31\",\"P00693\",\"N32\",\"P17654\",\"P04063\",\"N33\",\"B6RB08\",\"N34\",\"N35\",\"P04746\",\"P00690\",\"N36\",\"H2N0D4\",\"A0SEG1\"],\n      \"Data\":[[\"d\"],[\"Q\"],[\"H\"],[\"d\"],[\"Q\"],[\"d\"],[\"d\"],[\"Q\"],[\"d\"],[\"d\"],[\"Q\"],[\"Q\"],[\"b\"],[\"G\"],[\"b\"],[\"b\"],[\"b\"],[\"a\"],[\"L\"],[\"D\"],[\"b\"],[\"G\"],[\"b\"],[\"G\"],[\"b\"],[\"G\"],[\"b\"],[\"G\"],[\"G\"],[\"b\"],[\"b\"],[\"G\"],[\"b\"],[\"G\"],[\"G\"],[\"b\"],[\"G\"],[\"b\"],[\"G\"],[\"G\"],[\"b\"],[\"b\"],[\"A\"],[\"b\"],[\"G\"],[\"b\"],[\"G\"],[\"b\"],[\"G\"],[\"c\"],[\"A\"],[\"A\"],[\"b\"],[\"b\"],[\"b\"],[\"G\"],[\"G\"],[\"b\"],[\"G\"],[\"G\"],[\"c\"],[\"A\"],[\"c\"],[\"A\"],[\"c\"],[\"A\"],[\"A\"],[\"d\"],[\"Q\"],[\"d\"],[\"d\"],[\"Q\"],[\"Q\"],[\"d\"],[\"Q\"],[\"Q\"]] } }\n</code></pre>"},{"location":"json-api/#train-modes-example","title":"Train \"modes\" (example)","text":"<pre><code>{ \"Command\":\"TrainModes\",\n  \"Auth\":\"Guest\",\n  \"Params\":\n    { \"Gamma\":1,\n      \"Rounds\":10,\n      \"Dataset\":\n        { \"Items\":[\"P25910\",\"Q704V1\",...],\n          \"Features\":[\"Pos184\",\"Pos186\",\"Pos306\"],\n          \"Data\":[[[\"H\",\"H\",\"H\"],[\"H\",\"H\",\"H\"], ...] ] },\n      \"Seed\":3,\n      \"Rate\":1,\n      \"Tree\":\n        { \"Parents\":[-1,0, ...],\n          \"Labels\":[\"0\",\"P25910\", ...],\n          \"Distances\":[0,0.73, ...],\n          \"Branchpoints\":220 },\n      \"Distrib\":\n        { \"Targets\":[[0],[0],[0]],\n          \"Modetypes\":[{\"Size\":3,\"Values\":[\"A\",\"B\",\"C\"],\"Datatype\":\"Character\"}],\n          \"Nodes\":[\n            { \"Condition\":[],\n              \"Pr\":[],\n              \"Variable\":{\"Domain\":{\"Predef\":\"Protein\"},\"Name\":\"N0__Pos184\"},\n              \"Nodetype\":\"CPT\",\n              \"Index\":[] },\n            { \"Condition\":[],\n              \"Pr\":[],\n              \"Variable\":{\"Domain\":{\"Predef\":\"Protein\"},\"Name\":\"N0__Pos186\"},\n              \"Nodetype\":\"CPT\",\n              \"Index\":[] },\n            { \"Condition\":[],\n              \"Pr\":[],\n              \"Variable\":{\"Domain\":{\"Predef\":\"Protein\"},\"Name\":\"N0__Pos306\"},\n              \"Nodetype\":\"CPT\",\n              \"Index\":[] } ],\n          \"Name\":\"N0\" } } }\n</code></pre>"},{"location":"json-api/#infer-modes-example","title":"Infer \"modes\" (example)","text":"<pre><code>{ \"Command\":\"InferModes\",\n  \"Auth\":\"Guest\",\n  \"Params\":\n    { \"Gamma\":1,\n      \"Latent\":true,\n      \"Rounds\":10,\n      \"Leaves-only\":false,\n      \"Dataset\":\n        { \"Items\":[\"P25910\",\"Q704V1\", ...],\n          \"Features\":[\"Pos184\",\"Pos186\",\"Pos306\"],\n          \"Data\":[[[\"H\",\"H\",\"H\"],[\"H\",\"H\",\"H\"], ...] ] },\n      \"Seed\":3,\n      \"Rate\":1,\n      \"Tree\":\n        { \"Parents\":[-1,0, ...],\n          \"Labels\":[\"0\",\"P25910\", ...],\n          \"Distances\":[0,0.73, ...],\n          \"Branchpoints\":220 },\n      \"Inference\":\"Marginal\",\n      \"Distrib\":\n        { \"Targets\":[[0],[0],[0]],\n          \"Modetypes\":[{\"Size\":3,\"Values\":[\"A\",\"B\",\"C\"],\"Datatype\":\"String\"}],\n          \"Nodes\":[\n            { \"Condition\":[[\"A\"],[\"B\"],[\"C\"]],\n              \"Pr\":[ \n                [0,0,0,0,0,0,0.998,0,0,0,0,3.973E-4,0,1.329E-5,0.001,4.4E-203,0,0,0,0],\n                [0,0,0,0,0,0,0.954,0,0,0,0,0.003,0,0.042,2.66E-4,0,0,0,0,0],\n                [0,0,0.036,0,0,0,0.863,0,0,0,0,0.023,0,9.73E-4,0.034,0.036,0,0,0,0] ],\n              \"Variable\":{\"Domain\":{\"Predef\":\"Protein\"},\"Name\":\"P25910__Pos184\"},\n              \"Nodetype\":\"CPT\",\n              \"Index\":[0,1,2] },\n            { \"Condition\":[[\"A\"],[\"B\"],[\"C\"]],\n              \"Pr\":[\n                [0,0,0.081,0.185,0,0,0.733,0,0,0,0,3.83E-33,0,0,2.91E-4,1.65E-32,0,0,0,0],\n                [0,0,9.36E-4,0.001,0,0,0.977,0,0,0,0,1.59E-44,0,0,0.021,4.53E-44,0,0,0,0],\n                [0,0,3.61E-4,0.007,0,0,0.884,0,0,0,0,0.036,0,0.036,7.91E-4,0.036,0,0,0,0] ],\n              \"Variable\":{\"Domain\":{\"Predef\":\"Protein\"},\"Name\":\"P25910__Pos186\"},\n              \"Nodetype\":\"CPT\",\n              \"Index\":[0,1,2] },\n            { \"Condition\":[[\"A\"],[\"B\"],[\"C\"]],\n              \"Pr\":[\n                [0,0,0,0.167,0,0,0.766,0,0.007,0.008,0,0,0,4.45E-203,2.59E-7,0.0527,0,0,0,0],\n                [0,0,0,8.17E-6,0,0,0.996,0,2.29E-4,2.70E-4,0,0,0,0,1.64E-8,0.003,0,0,0,0],\n                [0.034,0,0,8.55E-5,0,0,0.721,0,0.028,0.026,0,0,0,0.038,0.113,0.036,0,0,0,0] ],\n              \"Variable\":{\"Domain\":{\"Predef\":\"Protein\"},\"Name\":\"P25910__Pos306\"},\n              \"Nodetype\":\"CPT\",\n              \"Index\":[0,1,2] } ],\n          \"Name\":\"P25910\" },\n      \"Queries\":[0,1,2,\"Q704V1\"] } }\n</code></pre>"},{"location":"json-api/#data-structures","title":"Data structures","text":""},{"location":"json-api/#tree-datphyloidxtree","title":"<code>&lt;tree&gt;</code> (<code>dat.phylo.IdxTree</code>)","text":"<pre><code>{ \"Branchpoints\":&lt;number-of-idxs&gt;,\n  \"Labels\":[&lt;list-of-labels&gt;],\n  \"Parents\":[&lt;list-of-parent-idxs&gt;],     // -1 represents no parent\n  \"Distances\":[&lt;list-of-dists&gt;] }\n</code></pre>"},{"location":"json-api/#example_1","title":"Example","text":"<p>Newick definition</p> <pre><code>((A:0.6,((B:3.3,(C:1.0,D:2.5)cd:1.8)bcd:5,((E:3.9,F:4.5)ef:2.5,G:0.3)efg:7)X:3.2)Y:0.5,H:1.1)I:0.2\n</code></pre> <p>JSON definition (note internal nodes are re-numbered, left-to-right, depth-first)</p> <pre><code>{\"Parents\":[-1,0,1,1,3,4,4,6,6,3,9,10,10,9,0],\"Labels\":[\"0\",\"1\",\"A\",\"2\",\"3\",\"B\",\"4\",\"C\",\"D\",\"5\",\"6\",\"E\",\"F\",\"G\",\"H\"],\"Distances\":[0,0.5,0.6,3.2,5,3.3,1.8,1,2.5,7,2.5,3.9,4.5,0.3,1.1],\"Branchpoints\":15}\n</code></pre>"},{"location":"json-api/#sequence","title":"<code>&lt;sequence&gt;</code>","text":"<p>Examples of sequences as JSON:</p> <pre><code>{\"Seq\":[\"T\",\"N\",\"G\",\"A\",\"T\",\"C\",\"C\",\"N\",\"N\",\"G\"],\"Name\":\"S_1\",\"Datatype\":{\"Predef\":\"DNA with N\"}}\n{\"Seq\":[\"R\",\"T\",\"N\",\"R\",\"M\",\"A\",\"-\",\"R\",\"C\",\"E\",\"V\",\"N\",\"D\",\"T\",\"H\",\"Y\",\"L\",\"-\",\"R\",\"V\",\"D\",\"R\",\"N\",\"V\",\"E\",\"R\",\"M\"],\"Name\":\"S_2\",\"Datatype\":{\"Predef\":\"Protein with gap\"}}\n{\"Seq\":[\"U\",\"G\",\"C\",\"U\",\"G\",\"U\",\"G\",\"G\",\"U\",\"A\",\"U\",\"C\",\"G\",\"G\",\"U\",\"U\",\"A\",\"G\",\"A\",\"A\",\"U\",\"C\",\"G\",\"G\",\"G\",\"A\",\"A\",\"C\",\"C\",\"C\",\"A\",\"G\",\"A\",\"G\",\"C\"],\"Name\":\"S_3\",\"Datatype\":{\"Predef\":\"RNA\"}}\n{\"Seq\":[\"C\",\"G\",\"T\",\"T\",\"T\",\"G\",\"T\",\"G\",\"G\",\"A\",\"A\",\"C\",\"A\",\"A\",\"T\",\"A\",\"A\",\"C\",\"G\",\"C\",\"T\",\"T\",\"G\",\"G\",\"A\",\"A\",\"T\",\"C\",\"T\",\"T\"],\"Name\":\"S_4\",\"Datatype\":{\"Predef\":\"DNA\"}}\n{\"Seq\":[\"W\",\"L\",\"M\",\"F\",\"N\",\"Q\",\"Y\",\"T\",\"T\",\"S\",\"C\",\"H\",\"A\",\"A\",\"D\",\"G\",\"M\",\"I\",\"K\",\"F\",\"N\",\"Q\",\"W\",\"L\",\"G\",\"P\",\"V\",\"F\",\"M\",\"X\",\"V\"],\"Name\":\"S_5\",\"Datatype\":{\"Predef\":\"Protein with X\"}}\n{\"Seq\":[false,true,true,true,false,true,true,true,true,true,true,false,true,false,true,false,false,false,false,true,true,true,false,false,false,true,true,true,true,true,false,true,false,false,false,true,false,true,false,false,true,false,true,true],\"Name\":\"S_6\",\"Datatype\":{\"Predef\":\"Boolean\"}}\n{\"Seq\":[\"N\"],\"Name\":\"S_7\",\"Datatype\":{\"Predef\":\"RNA with N\"}}\n{\"Seq\":[\"L\",\"P\",\"A\",\"Q\",\"P\",\"S\",\"Q\",\"N\",\"Q\",\"D\",\"A\",\"R\",\"R\"],\"Name\":\"S_8\",\"Datatype\":{\"Predef\":\"Protein\"}}\n{\"Seq\":[\"G\",\"T\",\"A\",null,\"T\",\"N\",null,\"T\",\"G\",\"N\",\"A\",\"A\",\"A\",null,\"A\",\"N\",null,null,\"G\",\"A\",null,\"T\",null,\"C\",null,null,null,\"T\"],\"Name\":\"GS_1\",\"Datatype\":{\"Predef\":\"DNA with N\"}}\n{\"Seq\":[null,null,null,\"S\",null,null,null,null,\"Q\",\"E\",\"L\",\"S\",\"T\",\"W\",\"A\",\"-\",null,null,\"G\",\"N\",\"I\",\"L\"],\"Name\":\"GS_2\",\"Datatype\":{\"Predef\":\"Protein with gap\"}}\n{\"Seq\":[],\"Name\":\"GS_3\",\"Datatype\":{\"Predef\":\"RNA\"}}\n{\"Seq\":[\"A\",null,\"A\",\"G\",null,\"T\",\"A\",\"C\"],\"Name\":\"GS_4\",\"Datatype\":{\"Predef\":\"DNA\"}}\n{\"Seq\":[\"F\",\"V\",null,null,\"H\",\"E\",\"W\",\"N\",\"V\",\"D\",\"P\",null,\"M\",\"C\",null,null,\"I\",\"M\",\"H\",\"X\",\"E\",\"Q\",\"E\"],\"Name\":\"GS_5\",\"Datatype\":{\"Predef\":\"Protein with X\"}}\n{\"Seq\":[false,null,null,false,false,null,null,false,true,true,false,true,true,true,true,false,null,false],\"Name\":\"GS_6\",\"Datatype\":{\"Predef\":\"Boolean\"}}\n{\"Seq\":[\"U\",\"C\",\"N\",null,\"U\",\"U\",\"A\",\"G\",\"U\",\"A\",\"G\",null,null,\"C\",\"A\",\"G\",\"N\",\"A\",null,null,\"U\",\"N\",\"A\",\"C\",\"C\",null,null,null,\"C\",\"G\",null,\"U\"],\"Name\":\"GS_7\",\"Datatype\":{\"Predef\":\"RNA with N\"}}\n{\"Seq\":[\"W\",null,\"S\"],\"Name\":\"GS_8\",\"Datatype\":{\"Predef\":\"Protein\"}}\n</code></pre>"},{"location":"json-api/#alignment-datenumseqalignment","title":"<code>&lt;alignment&gt;</code> (<code>dat.EnumSeq.Alignment</code>)","text":"<p>Example of alignment:</p> <pre><code>{ \"Sequences\":[\n    {\"Seq\":[null,\"G\",null,\"A\",\"G\",null,\"G\",\"G\",\"A\",\"G\"],\"Name\":\"AS_1\"},\n    {\"Seq\":[null,\"G\",null,\"A\",\"G\",null,\"G\",\"G\",\"T\",\"C\"],\"Name\":\"AS_2\"},\n    {\"Seq\":[null,\"G\",null,\"G\",\"A\",null,\"G\",\"T\",\"A\",\"A\"],\"Name\":\"AS_3\"},\n    {\"Seq\":[\"G\",\"G\",\"A\",\"C\",\"C\",null,\"A\",\"T\",\"C\",\"G\"],\"Name\":\"AS_4\"},\n    {\"Seq\":[\"A\",\"C\",null,\"T\",\"G\",null,\"T\",\"C\",\"A\",\"G\"],\"Name\":\"AS_5\"}, \n    ...\n  \"Datatype\":{\"Predef\":\"DNA\"} }\n</code></pre>"},{"location":"json-api/#pog-datpogpograph","title":"<code>&lt;POG&gt;</code> (<code>dat.pog.POGraph</code>)","text":""},{"location":"json-api/#example_2","title":"Example","text":"<p>Graph with a maximum of 5 nodes, here with two (indices 2 and 4), where 2 is adjacent to 4.  The graph starts with node with index 2 and ends with node with index 4.</p> <pre><code>{ \"Size\":5,\n  \"Indices\":[2,4],\n  \"Adjacent\":[[4],[]],\n  \"Starts\":[2],\n  \"Ends\":[4],\n  \"Nodetype\":\"class dat.pog.SymNode\",\n  \"GRASP_version\":\"12-Dec-2022\",\n  \"Directed\":true,\n  \"Terminated\":true,\n  \"Nodes\":[{\"Value\":\"E\"},{\"Value\":\"H\"}],\n  \"Datatype\":\"class dat.pog.POGraph\",\n  \"Name\":\"sequence47\" }\n</code></pre> <p>Additional fields in graphs with edge attributes (including POGs):</p> <pre><code>  \"Edgeindices\":[[2,4],[-1,2],[4,5]],\n  \"Edges\":[{\"Recip\":true,\"Backward\":true,\"Forward\":true,\"Weight\":0}, ...]\n</code></pre>"},{"location":"json-api/#pogtree-datpogpogtree","title":"<code>&lt;POGTree&gt;</code> (<code>dat.pog.POGTree</code>)","text":"<pre><code>{ \"Tree\":&lt;tree&gt;,\n  \"Hashcode\":-631886170,\n  \"Extants\":[&lt;POG1&gt;, &lt;POG2&gt;, ...] }\n</code></pre>"},{"location":"json-api/#dataset-apijsonutilsdataset","title":"<code>&lt;dataset&gt;</code> (<code>api.JSONUtils.DataSet</code>)","text":"<p>Currently, it is possible to represent either samples by \"headers\", or by \"items\" each of which has \"features\". The latter implies that data are indexed, not only by sample and header, but by sample, item and feature, forming a 3D tensor. </p> <pre><code>{ \"Headers\":[&lt;header1&gt;,&lt;header2&gt;, ...],\n  \"Data\":[ [ ... ] ] }\n</code></pre> <p>or</p> <pre><code>{ \"Items\":[&lt;item1&gt;,&lt;item2&gt;, ...],\n  \"Features\":[&lt;feature1&gt;,&lt;feature2&gt;, ...],\n  \"Data\":[ [ [ ... ] ] ] }\n</code></pre> <p>Note: the data matrix is first indexed by sample, then either header, or by item then feature.</p>"},{"location":"json-api/#example_3","title":"Example","text":"<p>The example has 39 protein names as <code>Headers</code>,  which are listed in the same order as the list of observations for each.  In the example below, there is two observations for each protein name;  the value <code>null</code> signifies absence of observation. </p> <pre><code>{ \"Headers\":[\"A5ILB0\",\"P08144\",\"P29957\",\"H2N0D4\"],\n  \"Data\":[[8.5,7.35,7.35,7],[9,9,null,8.5]]}\n</code></pre>"},{"location":"json-api/#bnode-bnbnode-ie-bayesian-network-node","title":"<code>&lt;bnode&gt;</code> (<code>bn.BNode</code> i.e. Bayesian network node)","text":"<p>Here's a discrete/enumerable CPT node (with one enumerable parent variable):</p> <pre><code>{ \"Condition\":[[\"A\"],[\"B\"],[\"C\"]],\n  \"Pr\":[[0.36,0.38,0.26],[0.50,0.32,0.18],[0.07,0.39,0.54]],\n  \"Index\":[0,1,2],\n  \"Domain\":\n    { \"Size\":3,\n      \"Values\":[0,1,2],\n      \"Datatype\":\"Integer\" } }\n</code></pre> <p>Here's a continuous/Gaussian GDT node (with the same enumerable parent variable):</p> <pre><code>{ \"Condition\":[[\"A\"],[\"B\"],[\"C\"]],\n  \"Pr\":[[2.1,0.5],[6.4,0.5],[1.3,0.5]],\n  \"Index\":[0,1,2],\n  \"Domain\":\"dat.Continuous@525b461a\" }\n</code></pre>"},{"location":"phylotree/","title":"phylotree","text":"<p>phylotree is a tool to experiment with the generation of phylogenentic trees that mimic natural or synthetic ones.</p> <p>It completes two major steps; first, phylotree fits a mixture of Gamma distributions on the distances with no  regard to where they are topologically, or relative to one another. Phylogenetic trees that have been generated from sequence alignment, in turn following a data collection process, are likely to have a bias in the branch lengths.</p> <p>The second step is to account for these topological biases of the branch lengths, often observable in terms of the  leaf-to-root distances that can deviate strongly between a tree that assumes no bias and one based on real data.  This is done by calibrating the order of the branch lengths in the unbiased tree.  The result is a tree that is more similar to the original tree in terms of mean leaf-to-root distances.</p> <p>How is this done? The mixture of Gamma distributions is used to tentatively assign distances to all branches in  the target tree independently of their position. Indeed, the mean distance of branches in the source tree is  generally well-replicated by the mean in the target tree. phylotree estimates a (Gaussian) distribution of the  leaf-to-root distances in the source tree, which serves to evaluate the topological bias of distances.  In fact, for many trees, the mean leaf-to-root distances in natural and synthetic trees are different.  We note that a path in the target tree, defines a leaf-to-root order of distances. Importantly, changing the  order in one path does not influence its leaf-to-root distance, but it does change the  leaf-to-root distances of paths that share one of these distances. </p> <p>Using the Gaussian distribution of leaf-to-root distances from the source tree, phylotree samples pairs of  leaves in proportion to the log odds ratio of their leaf-to-root distances; this implies that we pick a primary leaf which has a high likelihood of being generated  by the source distribution, and a secondary leaf which has a low likelihood. Then distances on the path from the  primary leaf to the root are chosen such that swapping them has the greatest effect in the direction that would  make the secondary leaf-to-root distance improve its likelihood. The two distances are updated and the process is repeated.</p>"},{"location":"phylotree/#using-phylotree","title":"Using phylotree","text":"<p><code>Usage:</code></p> <p>phylotree typically loads or synthesises one tree, then tries to mimic the (pseudo-biological) properties of that first tree when synthesising a target tree.</p> <p>The first tree can be provided as a Newick file or by specifying a range of parameters.</p> <p>The second tree is based on fitting a mixture of Gamma distributions to the first tree, calibrated to topological biases of branch lengths.</p> <p><code>Usage: dat.phylo.Tree</code> or phylotree <code>[options]</code></p> <pre><code>-l, --load &lt;String&gt;&gt;      Specify the file name from which a source tree is loaded\n\n-s, --save &lt;String&gt;       Specify the file name to which the target tree is saved\n\n-a, --alpha &lt;Double&gt;      Specify the alpha parameter for the source Gamma distribution\n\n-b, --beta &lt;Double&gt;       Specify the beta parameter for the source Gamma distribution\n\n-n, --nleaves &lt;Integer&gt;   Specify the number of leaves in the source tree\n\n-d, --meandist &lt;Double&gt;   Specify the mean distance to root in source tree\n\n--seed &lt;Integer&gt;          Specify the random seed\n\n--ncomp &lt;Integer&gt;         Specify the number of components in target Gamma mixture\n\n--iter &lt;Integer&gt;          Iterations to calibrate topological branch length biases\n\n-v, --verbose             Enable verbose mode\n\n-h, --help                Show this help message\n</code></pre>"},{"location":"phylotree/#notes","title":"Notes:","text":""},{"location":"phylotree/#examples","title":"Examples","text":"<p>```bash</p>"},{"location":"travis/","title":"Tracing Ancestors Via Indels and Substitutions (TrAVIS)","text":"<p>TrAVIS is a phylogenetic tree and ancestor sequence genertor. It forms part of the GRASP-suite (Foley et al., 2022).</p> <p>TrAVIS samples the Gamma distribution \u03b3(\u03ba, \u03b8) (where \u03ba \u2208 {0.5, 1, 2} defines the shape  and \u03b8 = 0.2 the scale) to set distances on each branch (in turn normalised to the mean \u03b4),  bi-furcating each branch point until the specified number of sequences have been mapped  as leaves. For each tree, substitutions, insertions and deletions are randomly introduced at each  branch point. Starting at the root with an arbitrary amino acid sequence, the sequence at  each of its children is determined recursively.  For a sequence, each position is considered as a possible site for a mutation as a Poisson  process with a relative rate 2r; following the recipe given by Cartwright Cartwright (2008),  \u03b7 = e\u22122rt is the probability that no indel has occurred, which implies a substitution  (determined via a model like that suggested by Le and Gasquel Le and Gascuel (2008), for  instance); the probability of an insertion is (1 \u2212 \u03b7)/2 which is equivalent to that of a  deletion. Finally, the length of the insertion (or deletion) is given by a sampling the  Poisson distribution f(\u03bb) (where mean \u03bb = 1, which will give 0 or 1 37% of the time, with  greater widths less frequent).</p>"},{"location":"travis/#using-travis","title":"Using TrAVIS","text":"<p>Usage: <code>asr.TrAVIS</code> <code>[&lt;ancestor-seq&gt;]</code></p> <pre><code>`[-nwk &lt;tree-file&gt; -out &lt;output-file-or-dir&gt;]`\n\n`{-model &lt;JTT(default)|Dayhoff|LG|WAG|JC|Yang&gt;}`\n\n`{-load}`\n\n`{-rates &lt;a&gt;}`\n\n`{-seed &lt;random&gt;}`\n\n`{-extants &lt;5(default)&gt;}`\n\n`{-dist &lt;mean-extant-to-root&gt;`\n\n`{-shape &lt;1.1(default)&gt;}`\n\n`{-scale &lt;0.2(default)&gt;}`\n\n`{-indel &lt;1.0(default)&gt;}`\n\n`{-delprop &lt;0.5(default)&gt;}`\n\n`{-indelmodel &lt;zero-truncated-poisson(default)|poisson&gt; {-lambda  &lt;1(default)&gt;}`\n\n`{-gap}`\n\n`{-format &lt;FASTA(default)|CLUSTAL|DOT|TREE|RATES|DIR&gt;}`\n\n`{-verbose}`\n\n`{-help}`\n\nwhere\ntree-file is a phylogenetic tree on Newick format\noutput-file-or-dir is the filename or name of directory of results\n\"-gap\" means that the gap-character is included in the resulting output (default for CLUSTAL format)\n\"-verbose\" means that details of evolutionary events are printed out on standard-output)\n\"-help\" prints out the parameters and instructions of how to use this tool\n</code></pre>"},{"location":"travis/#notes","title":"Notes:","text":"<p>Evolutionary models for proteins include Jones-Taylor-Thornton (default), Dayhoff-Schwartz-Orcutt, Le-Gasquel and Whelan-Goldman; DNA models include Jukes-Cantor and Yang (general reversible process model).</p> <p>Tree is set to have specified extants and gets distances from the Gamma distribution, with parameters: shape (aka a and K), and scale (aka b, where Lambda=1/b)</p> <p>mean distance to root is used to scale distances in the tree (noting that greater number of extants indirectly amplifies the time scope of the tree).</p> <p>Position-specific evolutionary rates from a Gamma distribution with specified parameter \"a\" and mean 1; if rate is unspecified, a uniform rate 1 is used.</p> <p>Rates for insertions and deletions are scaled by -indel  (multiplier &gt; 1 reduces, multiplier &lt; 1 increases chance of indels). <p>The proportion of deletions relative to insertions and deletions is given by -delprop  (proportion &lt; 0.5 means that insertions will dominate. <p>The mean rate of occurrence in the Poisson distribution of the indel length by lambda   </p>"}]}